// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_mp.proto

#ifndef PROTOBUF_cmd_2fcmd_5fmp_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fmp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class GetPlayerMpModeAvailabilityReq;
class GetPlayerMpModeAvailabilityReqDefaultTypeInternal;
extern GetPlayerMpModeAvailabilityReqDefaultTypeInternal _GetPlayerMpModeAvailabilityReq_default_instance_;
class GetPlayerMpModeAvailabilityRsp;
class GetPlayerMpModeAvailabilityRspDefaultTypeInternal;
extern GetPlayerMpModeAvailabilityRspDefaultTypeInternal _GetPlayerMpModeAvailabilityRsp_default_instance_;
class MpBlockNotify;
class MpBlockNotifyDefaultTypeInternal;
extern MpBlockNotifyDefaultTypeInternal _MpBlockNotify_default_instance_;
class MpPlayGuestReplyInviteReq;
class MpPlayGuestReplyInviteReqDefaultTypeInternal;
extern MpPlayGuestReplyInviteReqDefaultTypeInternal _MpPlayGuestReplyInviteReq_default_instance_;
class MpPlayGuestReplyInviteRsp;
class MpPlayGuestReplyInviteRspDefaultTypeInternal;
extern MpPlayGuestReplyInviteRspDefaultTypeInternal _MpPlayGuestReplyInviteRsp_default_instance_;
class MpPlayGuestReplyNotify;
class MpPlayGuestReplyNotifyDefaultTypeInternal;
extern MpPlayGuestReplyNotifyDefaultTypeInternal _MpPlayGuestReplyNotify_default_instance_;
class MpPlayInviteResultNotify;
class MpPlayInviteResultNotifyDefaultTypeInternal;
extern MpPlayInviteResultNotifyDefaultTypeInternal _MpPlayInviteResultNotify_default_instance_;
class MpPlayOwnerCheckReq;
class MpPlayOwnerCheckReqDefaultTypeInternal;
extern MpPlayOwnerCheckReqDefaultTypeInternal _MpPlayOwnerCheckReq_default_instance_;
class MpPlayOwnerCheckRsp;
class MpPlayOwnerCheckRspDefaultTypeInternal;
extern MpPlayOwnerCheckRspDefaultTypeInternal _MpPlayOwnerCheckRsp_default_instance_;
class MpPlayOwnerInviteNotify;
class MpPlayOwnerInviteNotifyDefaultTypeInternal;
extern MpPlayOwnerInviteNotifyDefaultTypeInternal _MpPlayOwnerInviteNotify_default_instance_;
class MpPlayOwnerStartInviteReq;
class MpPlayOwnerStartInviteReqDefaultTypeInternal;
extern MpPlayOwnerStartInviteReqDefaultTypeInternal _MpPlayOwnerStartInviteReq_default_instance_;
class MpPlayOwnerStartInviteRsp;
class MpPlayOwnerStartInviteRspDefaultTypeInternal;
extern MpPlayOwnerStartInviteRspDefaultTypeInternal _MpPlayOwnerStartInviteRsp_default_instance_;
class MpPlayPrepareInterruptNotify;
class MpPlayPrepareInterruptNotifyDefaultTypeInternal;
extern MpPlayPrepareInterruptNotifyDefaultTypeInternal _MpPlayPrepareInterruptNotify_default_instance_;
class MpPlayPrepareNotify;
class MpPlayPrepareNotifyDefaultTypeInternal;
extern MpPlayPrepareNotifyDefaultTypeInternal _MpPlayPrepareNotify_default_instance_;
class PSPlayerApplyEnterMpReq;
class PSPlayerApplyEnterMpReqDefaultTypeInternal;
extern PSPlayerApplyEnterMpReqDefaultTypeInternal _PSPlayerApplyEnterMpReq_default_instance_;
class PSPlayerApplyEnterMpRsp;
class PSPlayerApplyEnterMpRspDefaultTypeInternal;
extern PSPlayerApplyEnterMpRspDefaultTypeInternal _PSPlayerApplyEnterMpRsp_default_instance_;
class PlayerApplyEnterMpNotify;
class PlayerApplyEnterMpNotifyDefaultTypeInternal;
extern PlayerApplyEnterMpNotifyDefaultTypeInternal _PlayerApplyEnterMpNotify_default_instance_;
class PlayerApplyEnterMpReq;
class PlayerApplyEnterMpReqDefaultTypeInternal;
extern PlayerApplyEnterMpReqDefaultTypeInternal _PlayerApplyEnterMpReq_default_instance_;
class PlayerApplyEnterMpResultNotify;
class PlayerApplyEnterMpResultNotifyDefaultTypeInternal;
extern PlayerApplyEnterMpResultNotifyDefaultTypeInternal _PlayerApplyEnterMpResultNotify_default_instance_;
class PlayerApplyEnterMpResultReq;
class PlayerApplyEnterMpResultReqDefaultTypeInternal;
extern PlayerApplyEnterMpResultReqDefaultTypeInternal _PlayerApplyEnterMpResultReq_default_instance_;
class PlayerApplyEnterMpResultRsp;
class PlayerApplyEnterMpResultRspDefaultTypeInternal;
extern PlayerApplyEnterMpResultRspDefaultTypeInternal _PlayerApplyEnterMpResultRsp_default_instance_;
class PlayerApplyEnterMpRsp;
class PlayerApplyEnterMpRspDefaultTypeInternal;
extern PlayerApplyEnterMpRspDefaultTypeInternal _PlayerApplyEnterMpRsp_default_instance_;
class PlayerPreEnterMpNotify;
class PlayerPreEnterMpNotifyDefaultTypeInternal;
extern PlayerPreEnterMpNotifyDefaultTypeInternal _PlayerPreEnterMpNotify_default_instance_;
class PlayerQuitFromMpNotify;
class PlayerQuitFromMpNotifyDefaultTypeInternal;
extern PlayerQuitFromMpNotifyDefaultTypeInternal _PlayerQuitFromMpNotify_default_instance_;
class PlayerSetOnlyMPWithPSPlayerReq;
class PlayerSetOnlyMPWithPSPlayerReqDefaultTypeInternal;
extern PlayerSetOnlyMPWithPSPlayerReqDefaultTypeInternal _PlayerSetOnlyMPWithPSPlayerReq_default_instance_;
class PlayerSetOnlyMPWithPSPlayerRsp;
class PlayerSetOnlyMPWithPSPlayerRspDefaultTypeInternal;
extern PlayerSetOnlyMPWithPSPlayerRspDefaultTypeInternal _PlayerSetOnlyMPWithPSPlayerRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fmp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fmp_2eproto

enum PlayerApplyEnterMpNotify_CmdId {
  PlayerApplyEnterMpNotify_CmdId_NONE = 0,
  PlayerApplyEnterMpNotify_CmdId_CMD_ID = 1826,
  PlayerApplyEnterMpNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpNotify_CmdId_PlayerApplyEnterMpNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpNotify_CmdId_PlayerApplyEnterMpNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpNotify_CmdId_IsValid(int value);
const PlayerApplyEnterMpNotify_CmdId PlayerApplyEnterMpNotify_CmdId_CmdId_MIN = PlayerApplyEnterMpNotify_CmdId_NONE;
const PlayerApplyEnterMpNotify_CmdId PlayerApplyEnterMpNotify_CmdId_CmdId_MAX = PlayerApplyEnterMpNotify_CmdId_CMD_ID;
const int PlayerApplyEnterMpNotify_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpNotify_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpNotify_CmdId_Name(PlayerApplyEnterMpNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpNotify_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpNotify_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpNotify_CmdId>(
    PlayerApplyEnterMpNotify_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpReq_CmdId {
  PlayerApplyEnterMpReq_CmdId_NONE = 0,
  PlayerApplyEnterMpReq_CmdId_CMD_ID = 1818,
  PlayerApplyEnterMpReq_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpReq_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpReq_CmdId_IS_ALLOW_CLIENT = 1,
  PlayerApplyEnterMpReq_CmdId_PlayerApplyEnterMpReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpReq_CmdId_PlayerApplyEnterMpReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpReq_CmdId_IsValid(int value);
const PlayerApplyEnterMpReq_CmdId PlayerApplyEnterMpReq_CmdId_CmdId_MIN = PlayerApplyEnterMpReq_CmdId_NONE;
const PlayerApplyEnterMpReq_CmdId PlayerApplyEnterMpReq_CmdId_CmdId_MAX = PlayerApplyEnterMpReq_CmdId_CMD_ID;
const int PlayerApplyEnterMpReq_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpReq_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpReq_CmdId_Name(PlayerApplyEnterMpReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpReq_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpReq_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpReq_CmdId>(
    PlayerApplyEnterMpReq_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpRsp_CmdId {
  PlayerApplyEnterMpRsp_CmdId_NONE = 0,
  PlayerApplyEnterMpRsp_CmdId_CMD_ID = 1825,
  PlayerApplyEnterMpRsp_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpRsp_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpRsp_CmdId_PlayerApplyEnterMpRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpRsp_CmdId_PlayerApplyEnterMpRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpRsp_CmdId_IsValid(int value);
const PlayerApplyEnterMpRsp_CmdId PlayerApplyEnterMpRsp_CmdId_CmdId_MIN = PlayerApplyEnterMpRsp_CmdId_NONE;
const PlayerApplyEnterMpRsp_CmdId PlayerApplyEnterMpRsp_CmdId_CmdId_MAX = PlayerApplyEnterMpRsp_CmdId_CMD_ID;
const int PlayerApplyEnterMpRsp_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpRsp_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpRsp_CmdId_Name(PlayerApplyEnterMpRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpRsp_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpRsp_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpRsp_CmdId>(
    PlayerApplyEnterMpRsp_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultNotify_CmdId {
  PlayerApplyEnterMpResultNotify_CmdId_NONE = 0,
  PlayerApplyEnterMpResultNotify_CmdId_CMD_ID = 1807,
  PlayerApplyEnterMpResultNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpResultNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpResultNotify_CmdId_PlayerApplyEnterMpResultNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultNotify_CmdId_PlayerApplyEnterMpResultNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultNotify_CmdId_IsValid(int value);
const PlayerApplyEnterMpResultNotify_CmdId PlayerApplyEnterMpResultNotify_CmdId_CmdId_MIN = PlayerApplyEnterMpResultNotify_CmdId_NONE;
const PlayerApplyEnterMpResultNotify_CmdId PlayerApplyEnterMpResultNotify_CmdId_CmdId_MAX = PlayerApplyEnterMpResultNotify_CmdId_CMD_ID;
const int PlayerApplyEnterMpResultNotify_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpResultNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultNotify_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultNotify_CmdId_Name(PlayerApplyEnterMpResultNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultNotify_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultNotify_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultNotify_CmdId>(
    PlayerApplyEnterMpResultNotify_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultNotify_Reason {
  PlayerApplyEnterMpResultNotify_Reason_PLAYER_JUDGE = 0,
  PlayerApplyEnterMpResultNotify_Reason_SCENE_CANNOT_ENTER = 1,
  PlayerApplyEnterMpResultNotify_Reason_PLAYER_CANNOT_ENTER_MP = 2,
  PlayerApplyEnterMpResultNotify_Reason_SYSTEM_JUDGE = 3,
  PlayerApplyEnterMpResultNotify_Reason_ALLOW_ENTER_PLAYER_FULL = 4,
  PlayerApplyEnterMpResultNotify_Reason_WORLD_LEVEL_LOWER_THAN_HOST = 5,
  PlayerApplyEnterMpResultNotify_Reason_HOST_IN_MATCH = 6,
  PlayerApplyEnterMpResultNotify_Reason_PLAYER_IN_BLACKLIST = 7,
  PlayerApplyEnterMpResultNotify_Reason_PS_PLAYER_NOT_ACCEPT_OTHERS = 8,
  PlayerApplyEnterMpResultNotify_Reason_HOST_IS_BLOCKED = 9,
  PlayerApplyEnterMpResultNotify_Reason_OTHER_DATA_VERSION_NOT_LATEST = 10,
  PlayerApplyEnterMpResultNotify_Reason_DATA_VERSION_NOT_LATEST = 11,
  PlayerApplyEnterMpResultNotify_Reason_PLAYER_NOT_IN_PLAYER_WORLD = 12,
  PlayerApplyEnterMpResultNotify_Reason_MAX_PLAYER = 13,
  PlayerApplyEnterMpResultNotify_Reason_PlayerApplyEnterMpResultNotify_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultNotify_Reason_PlayerApplyEnterMpResultNotify_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultNotify_Reason_IsValid(int value);
const PlayerApplyEnterMpResultNotify_Reason PlayerApplyEnterMpResultNotify_Reason_Reason_MIN = PlayerApplyEnterMpResultNotify_Reason_PLAYER_JUDGE;
const PlayerApplyEnterMpResultNotify_Reason PlayerApplyEnterMpResultNotify_Reason_Reason_MAX = PlayerApplyEnterMpResultNotify_Reason_MAX_PLAYER;
const int PlayerApplyEnterMpResultNotify_Reason_Reason_ARRAYSIZE = PlayerApplyEnterMpResultNotify_Reason_Reason_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultNotify_Reason_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultNotify_Reason_Name(PlayerApplyEnterMpResultNotify_Reason value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultNotify_Reason_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultNotify_Reason_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultNotify_Reason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultNotify_Reason>(
    PlayerApplyEnterMpResultNotify_Reason_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultReq_CmdId {
  PlayerApplyEnterMpResultReq_CmdId_NONE = 0,
  PlayerApplyEnterMpResultReq_CmdId_CMD_ID = 1802,
  PlayerApplyEnterMpResultReq_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpResultReq_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpResultReq_CmdId_IS_ALLOW_CLIENT = 1,
  PlayerApplyEnterMpResultReq_CmdId_PlayerApplyEnterMpResultReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultReq_CmdId_PlayerApplyEnterMpResultReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultReq_CmdId_IsValid(int value);
const PlayerApplyEnterMpResultReq_CmdId PlayerApplyEnterMpResultReq_CmdId_CmdId_MIN = PlayerApplyEnterMpResultReq_CmdId_NONE;
const PlayerApplyEnterMpResultReq_CmdId PlayerApplyEnterMpResultReq_CmdId_CmdId_MAX = PlayerApplyEnterMpResultReq_CmdId_CMD_ID;
const int PlayerApplyEnterMpResultReq_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpResultReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultReq_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultReq_CmdId_Name(PlayerApplyEnterMpResultReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultReq_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultReq_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultReq_CmdId>(
    PlayerApplyEnterMpResultReq_CmdId_descriptor(), name, value);
}
enum PlayerApplyEnterMpResultRsp_CmdId {
  PlayerApplyEnterMpResultRsp_CmdId_NONE = 0,
  PlayerApplyEnterMpResultRsp_CmdId_CMD_ID = 1831,
  PlayerApplyEnterMpResultRsp_CmdId_ENET_CHANNEL_ID = 0,
  PlayerApplyEnterMpResultRsp_CmdId_ENET_IS_RELIABLE = 1,
  PlayerApplyEnterMpResultRsp_CmdId_PlayerApplyEnterMpResultRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerApplyEnterMpResultRsp_CmdId_PlayerApplyEnterMpResultRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerApplyEnterMpResultRsp_CmdId_IsValid(int value);
const PlayerApplyEnterMpResultRsp_CmdId PlayerApplyEnterMpResultRsp_CmdId_CmdId_MIN = PlayerApplyEnterMpResultRsp_CmdId_NONE;
const PlayerApplyEnterMpResultRsp_CmdId PlayerApplyEnterMpResultRsp_CmdId_CmdId_MAX = PlayerApplyEnterMpResultRsp_CmdId_CMD_ID;
const int PlayerApplyEnterMpResultRsp_CmdId_CmdId_ARRAYSIZE = PlayerApplyEnterMpResultRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerApplyEnterMpResultRsp_CmdId_descriptor();
inline const ::std::string& PlayerApplyEnterMpResultRsp_CmdId_Name(PlayerApplyEnterMpResultRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerApplyEnterMpResultRsp_CmdId_descriptor(), value);
}
inline bool PlayerApplyEnterMpResultRsp_CmdId_Parse(
    const ::std::string& name, PlayerApplyEnterMpResultRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerApplyEnterMpResultRsp_CmdId>(
    PlayerApplyEnterMpResultRsp_CmdId_descriptor(), name, value);
}
enum PlayerQuitFromMpNotify_CmdId {
  PlayerQuitFromMpNotify_CmdId_NONE = 0,
  PlayerQuitFromMpNotify_CmdId_CMD_ID = 1829,
  PlayerQuitFromMpNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerQuitFromMpNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerQuitFromMpNotify_CmdId_PlayerQuitFromMpNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerQuitFromMpNotify_CmdId_PlayerQuitFromMpNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerQuitFromMpNotify_CmdId_IsValid(int value);
const PlayerQuitFromMpNotify_CmdId PlayerQuitFromMpNotify_CmdId_CmdId_MIN = PlayerQuitFromMpNotify_CmdId_NONE;
const PlayerQuitFromMpNotify_CmdId PlayerQuitFromMpNotify_CmdId_CmdId_MAX = PlayerQuitFromMpNotify_CmdId_CMD_ID;
const int PlayerQuitFromMpNotify_CmdId_CmdId_ARRAYSIZE = PlayerQuitFromMpNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerQuitFromMpNotify_CmdId_descriptor();
inline const ::std::string& PlayerQuitFromMpNotify_CmdId_Name(PlayerQuitFromMpNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerQuitFromMpNotify_CmdId_descriptor(), value);
}
inline bool PlayerQuitFromMpNotify_CmdId_Parse(
    const ::std::string& name, PlayerQuitFromMpNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerQuitFromMpNotify_CmdId>(
    PlayerQuitFromMpNotify_CmdId_descriptor(), name, value);
}
enum PlayerQuitFromMpNotify_QuitReason {
  PlayerQuitFromMpNotify_QuitReason_INVALID = 0,
  PlayerQuitFromMpNotify_QuitReason_HOST_NO_OTHER_PLAYER = 1,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST = 2,
  PlayerQuitFromMpNotify_QuitReason_BACK_TO_MY_WORLD = 3,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_LOGOUT = 4,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_BLOCK = 5,
  PlayerQuitFromMpNotify_QuitReason_BE_BLOCKED = 6,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_ENTER_HOME = 7,
  PlayerQuitFromMpNotify_QuitReason_HOST_SCENE_INVALID = 8,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_PLAY = 9,
  PlayerQuitFromMpNotify_QuitReason_KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED = 10,
  PlayerQuitFromMpNotify_QuitReason_PlayerQuitFromMpNotify_QuitReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerQuitFromMpNotify_QuitReason_PlayerQuitFromMpNotify_QuitReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerQuitFromMpNotify_QuitReason_IsValid(int value);
const PlayerQuitFromMpNotify_QuitReason PlayerQuitFromMpNotify_QuitReason_QuitReason_MIN = PlayerQuitFromMpNotify_QuitReason_INVALID;
const PlayerQuitFromMpNotify_QuitReason PlayerQuitFromMpNotify_QuitReason_QuitReason_MAX = PlayerQuitFromMpNotify_QuitReason_KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED;
const int PlayerQuitFromMpNotify_QuitReason_QuitReason_ARRAYSIZE = PlayerQuitFromMpNotify_QuitReason_QuitReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerQuitFromMpNotify_QuitReason_descriptor();
inline const ::std::string& PlayerQuitFromMpNotify_QuitReason_Name(PlayerQuitFromMpNotify_QuitReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerQuitFromMpNotify_QuitReason_descriptor(), value);
}
inline bool PlayerQuitFromMpNotify_QuitReason_Parse(
    const ::std::string& name, PlayerQuitFromMpNotify_QuitReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerQuitFromMpNotify_QuitReason>(
    PlayerQuitFromMpNotify_QuitReason_descriptor(), name, value);
}
enum PlayerPreEnterMpNotify_CmdId {
  PlayerPreEnterMpNotify_CmdId_NONE = 0,
  PlayerPreEnterMpNotify_CmdId_CMD_ID = 1822,
  PlayerPreEnterMpNotify_CmdId_ENET_CHANNEL_ID = 0,
  PlayerPreEnterMpNotify_CmdId_ENET_IS_RELIABLE = 1,
  PlayerPreEnterMpNotify_CmdId_PlayerPreEnterMpNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerPreEnterMpNotify_CmdId_PlayerPreEnterMpNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerPreEnterMpNotify_CmdId_IsValid(int value);
const PlayerPreEnterMpNotify_CmdId PlayerPreEnterMpNotify_CmdId_CmdId_MIN = PlayerPreEnterMpNotify_CmdId_NONE;
const PlayerPreEnterMpNotify_CmdId PlayerPreEnterMpNotify_CmdId_CmdId_MAX = PlayerPreEnterMpNotify_CmdId_CMD_ID;
const int PlayerPreEnterMpNotify_CmdId_CmdId_ARRAYSIZE = PlayerPreEnterMpNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerPreEnterMpNotify_CmdId_descriptor();
inline const ::std::string& PlayerPreEnterMpNotify_CmdId_Name(PlayerPreEnterMpNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerPreEnterMpNotify_CmdId_descriptor(), value);
}
inline bool PlayerPreEnterMpNotify_CmdId_Parse(
    const ::std::string& name, PlayerPreEnterMpNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerPreEnterMpNotify_CmdId>(
    PlayerPreEnterMpNotify_CmdId_descriptor(), name, value);
}
enum PlayerPreEnterMpNotify_State {
  PlayerPreEnterMpNotify_State_INVALID = 0,
  PlayerPreEnterMpNotify_State_START = 1,
  PlayerPreEnterMpNotify_State_TIMEOUT = 2,
  PlayerPreEnterMpNotify_State_PlayerPreEnterMpNotify_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerPreEnterMpNotify_State_PlayerPreEnterMpNotify_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerPreEnterMpNotify_State_IsValid(int value);
const PlayerPreEnterMpNotify_State PlayerPreEnterMpNotify_State_State_MIN = PlayerPreEnterMpNotify_State_INVALID;
const PlayerPreEnterMpNotify_State PlayerPreEnterMpNotify_State_State_MAX = PlayerPreEnterMpNotify_State_TIMEOUT;
const int PlayerPreEnterMpNotify_State_State_ARRAYSIZE = PlayerPreEnterMpNotify_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerPreEnterMpNotify_State_descriptor();
inline const ::std::string& PlayerPreEnterMpNotify_State_Name(PlayerPreEnterMpNotify_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerPreEnterMpNotify_State_descriptor(), value);
}
inline bool PlayerPreEnterMpNotify_State_Parse(
    const ::std::string& name, PlayerPreEnterMpNotify_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerPreEnterMpNotify_State>(
    PlayerPreEnterMpNotify_State_descriptor(), name, value);
}
enum GetPlayerMpModeAvailabilityReq_CmdId {
  GetPlayerMpModeAvailabilityReq_CmdId_NONE = 0,
  GetPlayerMpModeAvailabilityReq_CmdId_CMD_ID = 1844,
  GetPlayerMpModeAvailabilityReq_CmdId_ENET_CHANNEL_ID = 0,
  GetPlayerMpModeAvailabilityReq_CmdId_ENET_IS_RELIABLE = 1,
  GetPlayerMpModeAvailabilityReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetPlayerMpModeAvailabilityReq_CmdId_GetPlayerMpModeAvailabilityReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetPlayerMpModeAvailabilityReq_CmdId_GetPlayerMpModeAvailabilityReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetPlayerMpModeAvailabilityReq_CmdId_IsValid(int value);
const GetPlayerMpModeAvailabilityReq_CmdId GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MIN = GetPlayerMpModeAvailabilityReq_CmdId_NONE;
const GetPlayerMpModeAvailabilityReq_CmdId GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MAX = GetPlayerMpModeAvailabilityReq_CmdId_CMD_ID;
const int GetPlayerMpModeAvailabilityReq_CmdId_CmdId_ARRAYSIZE = GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetPlayerMpModeAvailabilityReq_CmdId_descriptor();
inline const ::std::string& GetPlayerMpModeAvailabilityReq_CmdId_Name(GetPlayerMpModeAvailabilityReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetPlayerMpModeAvailabilityReq_CmdId_descriptor(), value);
}
inline bool GetPlayerMpModeAvailabilityReq_CmdId_Parse(
    const ::std::string& name, GetPlayerMpModeAvailabilityReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetPlayerMpModeAvailabilityReq_CmdId>(
    GetPlayerMpModeAvailabilityReq_CmdId_descriptor(), name, value);
}
enum GetPlayerMpModeAvailabilityRsp_CmdId {
  GetPlayerMpModeAvailabilityRsp_CmdId_NONE = 0,
  GetPlayerMpModeAvailabilityRsp_CmdId_CMD_ID = 1849,
  GetPlayerMpModeAvailabilityRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetPlayerMpModeAvailabilityRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetPlayerMpModeAvailabilityRsp_CmdId_GetPlayerMpModeAvailabilityRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetPlayerMpModeAvailabilityRsp_CmdId_GetPlayerMpModeAvailabilityRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetPlayerMpModeAvailabilityRsp_CmdId_IsValid(int value);
const GetPlayerMpModeAvailabilityRsp_CmdId GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MIN = GetPlayerMpModeAvailabilityRsp_CmdId_NONE;
const GetPlayerMpModeAvailabilityRsp_CmdId GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MAX = GetPlayerMpModeAvailabilityRsp_CmdId_CMD_ID;
const int GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_ARRAYSIZE = GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetPlayerMpModeAvailabilityRsp_CmdId_descriptor();
inline const ::std::string& GetPlayerMpModeAvailabilityRsp_CmdId_Name(GetPlayerMpModeAvailabilityRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetPlayerMpModeAvailabilityRsp_CmdId_descriptor(), value);
}
inline bool GetPlayerMpModeAvailabilityRsp_CmdId_Parse(
    const ::std::string& name, GetPlayerMpModeAvailabilityRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetPlayerMpModeAvailabilityRsp_CmdId>(
    GetPlayerMpModeAvailabilityRsp_CmdId_descriptor(), name, value);
}
enum PlayerSetOnlyMPWithPSPlayerReq_CmdId {
  PlayerSetOnlyMPWithPSPlayerReq_CmdId_NONE = 0,
  PlayerSetOnlyMPWithPSPlayerReq_CmdId_CMD_ID = 1820,
  PlayerSetOnlyMPWithPSPlayerReq_CmdId_ENET_CHANNEL_ID = 0,
  PlayerSetOnlyMPWithPSPlayerReq_CmdId_ENET_IS_RELIABLE = 1,
  PlayerSetOnlyMPWithPSPlayerReq_CmdId_IS_ALLOW_CLIENT = 1,
  PlayerSetOnlyMPWithPSPlayerReq_CmdId_PlayerSetOnlyMPWithPSPlayerReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerSetOnlyMPWithPSPlayerReq_CmdId_PlayerSetOnlyMPWithPSPlayerReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerSetOnlyMPWithPSPlayerReq_CmdId_IsValid(int value);
const PlayerSetOnlyMPWithPSPlayerReq_CmdId PlayerSetOnlyMPWithPSPlayerReq_CmdId_CmdId_MIN = PlayerSetOnlyMPWithPSPlayerReq_CmdId_NONE;
const PlayerSetOnlyMPWithPSPlayerReq_CmdId PlayerSetOnlyMPWithPSPlayerReq_CmdId_CmdId_MAX = PlayerSetOnlyMPWithPSPlayerReq_CmdId_CMD_ID;
const int PlayerSetOnlyMPWithPSPlayerReq_CmdId_CmdId_ARRAYSIZE = PlayerSetOnlyMPWithPSPlayerReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerSetOnlyMPWithPSPlayerReq_CmdId_descriptor();
inline const ::std::string& PlayerSetOnlyMPWithPSPlayerReq_CmdId_Name(PlayerSetOnlyMPWithPSPlayerReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_descriptor(), value);
}
inline bool PlayerSetOnlyMPWithPSPlayerReq_CmdId_Parse(
    const ::std::string& name, PlayerSetOnlyMPWithPSPlayerReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerSetOnlyMPWithPSPlayerReq_CmdId>(
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_descriptor(), name, value);
}
enum PlayerSetOnlyMPWithPSPlayerRsp_CmdId {
  PlayerSetOnlyMPWithPSPlayerRsp_CmdId_NONE = 0,
  PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CMD_ID = 1845,
  PlayerSetOnlyMPWithPSPlayerRsp_CmdId_ENET_CHANNEL_ID = 0,
  PlayerSetOnlyMPWithPSPlayerRsp_CmdId_ENET_IS_RELIABLE = 1,
  PlayerSetOnlyMPWithPSPlayerRsp_CmdId_PlayerSetOnlyMPWithPSPlayerRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerSetOnlyMPWithPSPlayerRsp_CmdId_PlayerSetOnlyMPWithPSPlayerRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerSetOnlyMPWithPSPlayerRsp_CmdId_IsValid(int value);
const PlayerSetOnlyMPWithPSPlayerRsp_CmdId PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CmdId_MIN = PlayerSetOnlyMPWithPSPlayerRsp_CmdId_NONE;
const PlayerSetOnlyMPWithPSPlayerRsp_CmdId PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CmdId_MAX = PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CMD_ID;
const int PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CmdId_ARRAYSIZE = PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerSetOnlyMPWithPSPlayerRsp_CmdId_descriptor();
inline const ::std::string& PlayerSetOnlyMPWithPSPlayerRsp_CmdId_Name(PlayerSetOnlyMPWithPSPlayerRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_descriptor(), value);
}
inline bool PlayerSetOnlyMPWithPSPlayerRsp_CmdId_Parse(
    const ::std::string& name, PlayerSetOnlyMPWithPSPlayerRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerSetOnlyMPWithPSPlayerRsp_CmdId>(
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_descriptor(), name, value);
}
enum PSPlayerApplyEnterMpReq_CmdId {
  PSPlayerApplyEnterMpReq_CmdId_NONE = 0,
  PSPlayerApplyEnterMpReq_CmdId_CMD_ID = 1841,
  PSPlayerApplyEnterMpReq_CmdId_ENET_CHANNEL_ID = 0,
  PSPlayerApplyEnterMpReq_CmdId_ENET_IS_RELIABLE = 1,
  PSPlayerApplyEnterMpReq_CmdId_IS_ALLOW_CLIENT = 1,
  PSPlayerApplyEnterMpReq_CmdId_PSPlayerApplyEnterMpReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PSPlayerApplyEnterMpReq_CmdId_PSPlayerApplyEnterMpReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PSPlayerApplyEnterMpReq_CmdId_IsValid(int value);
const PSPlayerApplyEnterMpReq_CmdId PSPlayerApplyEnterMpReq_CmdId_CmdId_MIN = PSPlayerApplyEnterMpReq_CmdId_NONE;
const PSPlayerApplyEnterMpReq_CmdId PSPlayerApplyEnterMpReq_CmdId_CmdId_MAX = PSPlayerApplyEnterMpReq_CmdId_CMD_ID;
const int PSPlayerApplyEnterMpReq_CmdId_CmdId_ARRAYSIZE = PSPlayerApplyEnterMpReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PSPlayerApplyEnterMpReq_CmdId_descriptor();
inline const ::std::string& PSPlayerApplyEnterMpReq_CmdId_Name(PSPlayerApplyEnterMpReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PSPlayerApplyEnterMpReq_CmdId_descriptor(), value);
}
inline bool PSPlayerApplyEnterMpReq_CmdId_Parse(
    const ::std::string& name, PSPlayerApplyEnterMpReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PSPlayerApplyEnterMpReq_CmdId>(
    PSPlayerApplyEnterMpReq_CmdId_descriptor(), name, value);
}
enum PSPlayerApplyEnterMpRsp_CmdId {
  PSPlayerApplyEnterMpRsp_CmdId_NONE = 0,
  PSPlayerApplyEnterMpRsp_CmdId_CMD_ID = 1842,
  PSPlayerApplyEnterMpRsp_CmdId_ENET_CHANNEL_ID = 0,
  PSPlayerApplyEnterMpRsp_CmdId_ENET_IS_RELIABLE = 1,
  PSPlayerApplyEnterMpRsp_CmdId_PSPlayerApplyEnterMpRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PSPlayerApplyEnterMpRsp_CmdId_PSPlayerApplyEnterMpRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PSPlayerApplyEnterMpRsp_CmdId_IsValid(int value);
const PSPlayerApplyEnterMpRsp_CmdId PSPlayerApplyEnterMpRsp_CmdId_CmdId_MIN = PSPlayerApplyEnterMpRsp_CmdId_NONE;
const PSPlayerApplyEnterMpRsp_CmdId PSPlayerApplyEnterMpRsp_CmdId_CmdId_MAX = PSPlayerApplyEnterMpRsp_CmdId_CMD_ID;
const int PSPlayerApplyEnterMpRsp_CmdId_CmdId_ARRAYSIZE = PSPlayerApplyEnterMpRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PSPlayerApplyEnterMpRsp_CmdId_descriptor();
inline const ::std::string& PSPlayerApplyEnterMpRsp_CmdId_Name(PSPlayerApplyEnterMpRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PSPlayerApplyEnterMpRsp_CmdId_descriptor(), value);
}
inline bool PSPlayerApplyEnterMpRsp_CmdId_Parse(
    const ::std::string& name, PSPlayerApplyEnterMpRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PSPlayerApplyEnterMpRsp_CmdId>(
    PSPlayerApplyEnterMpRsp_CmdId_descriptor(), name, value);
}
enum MpPlayOwnerCheckReq_CmdId {
  MpPlayOwnerCheckReq_CmdId_NONE = 0,
  MpPlayOwnerCheckReq_CmdId_CMD_ID = 1814,
  MpPlayOwnerCheckReq_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayOwnerCheckReq_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayOwnerCheckReq_CmdId_IS_ALLOW_CLIENT = 1,
  MpPlayOwnerCheckReq_CmdId_MpPlayOwnerCheckReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayOwnerCheckReq_CmdId_MpPlayOwnerCheckReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayOwnerCheckReq_CmdId_IsValid(int value);
const MpPlayOwnerCheckReq_CmdId MpPlayOwnerCheckReq_CmdId_CmdId_MIN = MpPlayOwnerCheckReq_CmdId_NONE;
const MpPlayOwnerCheckReq_CmdId MpPlayOwnerCheckReq_CmdId_CmdId_MAX = MpPlayOwnerCheckReq_CmdId_CMD_ID;
const int MpPlayOwnerCheckReq_CmdId_CmdId_ARRAYSIZE = MpPlayOwnerCheckReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayOwnerCheckReq_CmdId_descriptor();
inline const ::std::string& MpPlayOwnerCheckReq_CmdId_Name(MpPlayOwnerCheckReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayOwnerCheckReq_CmdId_descriptor(), value);
}
inline bool MpPlayOwnerCheckReq_CmdId_Parse(
    const ::std::string& name, MpPlayOwnerCheckReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayOwnerCheckReq_CmdId>(
    MpPlayOwnerCheckReq_CmdId_descriptor(), name, value);
}
enum MpPlayOwnerCheckRsp_CmdId {
  MpPlayOwnerCheckRsp_CmdId_NONE = 0,
  MpPlayOwnerCheckRsp_CmdId_CMD_ID = 1847,
  MpPlayOwnerCheckRsp_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayOwnerCheckRsp_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayOwnerCheckRsp_CmdId_MpPlayOwnerCheckRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayOwnerCheckRsp_CmdId_MpPlayOwnerCheckRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayOwnerCheckRsp_CmdId_IsValid(int value);
const MpPlayOwnerCheckRsp_CmdId MpPlayOwnerCheckRsp_CmdId_CmdId_MIN = MpPlayOwnerCheckRsp_CmdId_NONE;
const MpPlayOwnerCheckRsp_CmdId MpPlayOwnerCheckRsp_CmdId_CmdId_MAX = MpPlayOwnerCheckRsp_CmdId_CMD_ID;
const int MpPlayOwnerCheckRsp_CmdId_CmdId_ARRAYSIZE = MpPlayOwnerCheckRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayOwnerCheckRsp_CmdId_descriptor();
inline const ::std::string& MpPlayOwnerCheckRsp_CmdId_Name(MpPlayOwnerCheckRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayOwnerCheckRsp_CmdId_descriptor(), value);
}
inline bool MpPlayOwnerCheckRsp_CmdId_Parse(
    const ::std::string& name, MpPlayOwnerCheckRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayOwnerCheckRsp_CmdId>(
    MpPlayOwnerCheckRsp_CmdId_descriptor(), name, value);
}
enum MpPlayOwnerStartInviteReq_CmdId {
  MpPlayOwnerStartInviteReq_CmdId_NONE = 0,
  MpPlayOwnerStartInviteReq_CmdId_CMD_ID = 1837,
  MpPlayOwnerStartInviteReq_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayOwnerStartInviteReq_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayOwnerStartInviteReq_CmdId_IS_ALLOW_CLIENT = 1,
  MpPlayOwnerStartInviteReq_CmdId_MpPlayOwnerStartInviteReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayOwnerStartInviteReq_CmdId_MpPlayOwnerStartInviteReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayOwnerStartInviteReq_CmdId_IsValid(int value);
const MpPlayOwnerStartInviteReq_CmdId MpPlayOwnerStartInviteReq_CmdId_CmdId_MIN = MpPlayOwnerStartInviteReq_CmdId_NONE;
const MpPlayOwnerStartInviteReq_CmdId MpPlayOwnerStartInviteReq_CmdId_CmdId_MAX = MpPlayOwnerStartInviteReq_CmdId_CMD_ID;
const int MpPlayOwnerStartInviteReq_CmdId_CmdId_ARRAYSIZE = MpPlayOwnerStartInviteReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayOwnerStartInviteReq_CmdId_descriptor();
inline const ::std::string& MpPlayOwnerStartInviteReq_CmdId_Name(MpPlayOwnerStartInviteReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayOwnerStartInviteReq_CmdId_descriptor(), value);
}
inline bool MpPlayOwnerStartInviteReq_CmdId_Parse(
    const ::std::string& name, MpPlayOwnerStartInviteReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayOwnerStartInviteReq_CmdId>(
    MpPlayOwnerStartInviteReq_CmdId_descriptor(), name, value);
}
enum MpPlayOwnerStartInviteRsp_CmdId {
  MpPlayOwnerStartInviteRsp_CmdId_NONE = 0,
  MpPlayOwnerStartInviteRsp_CmdId_CMD_ID = 1823,
  MpPlayOwnerStartInviteRsp_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayOwnerStartInviteRsp_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayOwnerStartInviteRsp_CmdId_MpPlayOwnerStartInviteRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayOwnerStartInviteRsp_CmdId_MpPlayOwnerStartInviteRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayOwnerStartInviteRsp_CmdId_IsValid(int value);
const MpPlayOwnerStartInviteRsp_CmdId MpPlayOwnerStartInviteRsp_CmdId_CmdId_MIN = MpPlayOwnerStartInviteRsp_CmdId_NONE;
const MpPlayOwnerStartInviteRsp_CmdId MpPlayOwnerStartInviteRsp_CmdId_CmdId_MAX = MpPlayOwnerStartInviteRsp_CmdId_CMD_ID;
const int MpPlayOwnerStartInviteRsp_CmdId_CmdId_ARRAYSIZE = MpPlayOwnerStartInviteRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayOwnerStartInviteRsp_CmdId_descriptor();
inline const ::std::string& MpPlayOwnerStartInviteRsp_CmdId_Name(MpPlayOwnerStartInviteRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayOwnerStartInviteRsp_CmdId_descriptor(), value);
}
inline bool MpPlayOwnerStartInviteRsp_CmdId_Parse(
    const ::std::string& name, MpPlayOwnerStartInviteRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayOwnerStartInviteRsp_CmdId>(
    MpPlayOwnerStartInviteRsp_CmdId_descriptor(), name, value);
}
enum MpPlayOwnerInviteNotify_CmdId {
  MpPlayOwnerInviteNotify_CmdId_NONE = 0,
  MpPlayOwnerInviteNotify_CmdId_CMD_ID = 1835,
  MpPlayOwnerInviteNotify_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayOwnerInviteNotify_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayOwnerInviteNotify_CmdId_MpPlayOwnerInviteNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayOwnerInviteNotify_CmdId_MpPlayOwnerInviteNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayOwnerInviteNotify_CmdId_IsValid(int value);
const MpPlayOwnerInviteNotify_CmdId MpPlayOwnerInviteNotify_CmdId_CmdId_MIN = MpPlayOwnerInviteNotify_CmdId_NONE;
const MpPlayOwnerInviteNotify_CmdId MpPlayOwnerInviteNotify_CmdId_CmdId_MAX = MpPlayOwnerInviteNotify_CmdId_CMD_ID;
const int MpPlayOwnerInviteNotify_CmdId_CmdId_ARRAYSIZE = MpPlayOwnerInviteNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayOwnerInviteNotify_CmdId_descriptor();
inline const ::std::string& MpPlayOwnerInviteNotify_CmdId_Name(MpPlayOwnerInviteNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayOwnerInviteNotify_CmdId_descriptor(), value);
}
inline bool MpPlayOwnerInviteNotify_CmdId_Parse(
    const ::std::string& name, MpPlayOwnerInviteNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayOwnerInviteNotify_CmdId>(
    MpPlayOwnerInviteNotify_CmdId_descriptor(), name, value);
}
enum MpPlayGuestReplyInviteReq_CmdId {
  MpPlayGuestReplyInviteReq_CmdId_NONE = 0,
  MpPlayGuestReplyInviteReq_CmdId_CMD_ID = 1848,
  MpPlayGuestReplyInviteReq_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayGuestReplyInviteReq_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayGuestReplyInviteReq_CmdId_IS_ALLOW_CLIENT = 1,
  MpPlayGuestReplyInviteReq_CmdId_MpPlayGuestReplyInviteReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayGuestReplyInviteReq_CmdId_MpPlayGuestReplyInviteReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayGuestReplyInviteReq_CmdId_IsValid(int value);
const MpPlayGuestReplyInviteReq_CmdId MpPlayGuestReplyInviteReq_CmdId_CmdId_MIN = MpPlayGuestReplyInviteReq_CmdId_NONE;
const MpPlayGuestReplyInviteReq_CmdId MpPlayGuestReplyInviteReq_CmdId_CmdId_MAX = MpPlayGuestReplyInviteReq_CmdId_CMD_ID;
const int MpPlayGuestReplyInviteReq_CmdId_CmdId_ARRAYSIZE = MpPlayGuestReplyInviteReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayGuestReplyInviteReq_CmdId_descriptor();
inline const ::std::string& MpPlayGuestReplyInviteReq_CmdId_Name(MpPlayGuestReplyInviteReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayGuestReplyInviteReq_CmdId_descriptor(), value);
}
inline bool MpPlayGuestReplyInviteReq_CmdId_Parse(
    const ::std::string& name, MpPlayGuestReplyInviteReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayGuestReplyInviteReq_CmdId>(
    MpPlayGuestReplyInviteReq_CmdId_descriptor(), name, value);
}
enum MpPlayGuestReplyInviteRsp_CmdId {
  MpPlayGuestReplyInviteRsp_CmdId_NONE = 0,
  MpPlayGuestReplyInviteRsp_CmdId_CMD_ID = 1850,
  MpPlayGuestReplyInviteRsp_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayGuestReplyInviteRsp_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayGuestReplyInviteRsp_CmdId_MpPlayGuestReplyInviteRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayGuestReplyInviteRsp_CmdId_MpPlayGuestReplyInviteRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayGuestReplyInviteRsp_CmdId_IsValid(int value);
const MpPlayGuestReplyInviteRsp_CmdId MpPlayGuestReplyInviteRsp_CmdId_CmdId_MIN = MpPlayGuestReplyInviteRsp_CmdId_NONE;
const MpPlayGuestReplyInviteRsp_CmdId MpPlayGuestReplyInviteRsp_CmdId_CmdId_MAX = MpPlayGuestReplyInviteRsp_CmdId_CMD_ID;
const int MpPlayGuestReplyInviteRsp_CmdId_CmdId_ARRAYSIZE = MpPlayGuestReplyInviteRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayGuestReplyInviteRsp_CmdId_descriptor();
inline const ::std::string& MpPlayGuestReplyInviteRsp_CmdId_Name(MpPlayGuestReplyInviteRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayGuestReplyInviteRsp_CmdId_descriptor(), value);
}
inline bool MpPlayGuestReplyInviteRsp_CmdId_Parse(
    const ::std::string& name, MpPlayGuestReplyInviteRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayGuestReplyInviteRsp_CmdId>(
    MpPlayGuestReplyInviteRsp_CmdId_descriptor(), name, value);
}
enum MpPlayGuestReplyNotify_CmdId {
  MpPlayGuestReplyNotify_CmdId_NONE = 0,
  MpPlayGuestReplyNotify_CmdId_CMD_ID = 1812,
  MpPlayGuestReplyNotify_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayGuestReplyNotify_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayGuestReplyNotify_CmdId_MpPlayGuestReplyNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayGuestReplyNotify_CmdId_MpPlayGuestReplyNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayGuestReplyNotify_CmdId_IsValid(int value);
const MpPlayGuestReplyNotify_CmdId MpPlayGuestReplyNotify_CmdId_CmdId_MIN = MpPlayGuestReplyNotify_CmdId_NONE;
const MpPlayGuestReplyNotify_CmdId MpPlayGuestReplyNotify_CmdId_CmdId_MAX = MpPlayGuestReplyNotify_CmdId_CMD_ID;
const int MpPlayGuestReplyNotify_CmdId_CmdId_ARRAYSIZE = MpPlayGuestReplyNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayGuestReplyNotify_CmdId_descriptor();
inline const ::std::string& MpPlayGuestReplyNotify_CmdId_Name(MpPlayGuestReplyNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayGuestReplyNotify_CmdId_descriptor(), value);
}
inline bool MpPlayGuestReplyNotify_CmdId_Parse(
    const ::std::string& name, MpPlayGuestReplyNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayGuestReplyNotify_CmdId>(
    MpPlayGuestReplyNotify_CmdId_descriptor(), name, value);
}
enum MpPlayPrepareNotify_CmdId {
  MpPlayPrepareNotify_CmdId_NONE = 0,
  MpPlayPrepareNotify_CmdId_CMD_ID = 1833,
  MpPlayPrepareNotify_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayPrepareNotify_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayPrepareNotify_CmdId_MpPlayPrepareNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayPrepareNotify_CmdId_MpPlayPrepareNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayPrepareNotify_CmdId_IsValid(int value);
const MpPlayPrepareNotify_CmdId MpPlayPrepareNotify_CmdId_CmdId_MIN = MpPlayPrepareNotify_CmdId_NONE;
const MpPlayPrepareNotify_CmdId MpPlayPrepareNotify_CmdId_CmdId_MAX = MpPlayPrepareNotify_CmdId_CMD_ID;
const int MpPlayPrepareNotify_CmdId_CmdId_ARRAYSIZE = MpPlayPrepareNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayPrepareNotify_CmdId_descriptor();
inline const ::std::string& MpPlayPrepareNotify_CmdId_Name(MpPlayPrepareNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayPrepareNotify_CmdId_descriptor(), value);
}
inline bool MpPlayPrepareNotify_CmdId_Parse(
    const ::std::string& name, MpPlayPrepareNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayPrepareNotify_CmdId>(
    MpPlayPrepareNotify_CmdId_descriptor(), name, value);
}
enum MpPlayInviteResultNotify_CmdId {
  MpPlayInviteResultNotify_CmdId_NONE = 0,
  MpPlayInviteResultNotify_CmdId_CMD_ID = 1815,
  MpPlayInviteResultNotify_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayInviteResultNotify_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayInviteResultNotify_CmdId_MpPlayInviteResultNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayInviteResultNotify_CmdId_MpPlayInviteResultNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayInviteResultNotify_CmdId_IsValid(int value);
const MpPlayInviteResultNotify_CmdId MpPlayInviteResultNotify_CmdId_CmdId_MIN = MpPlayInviteResultNotify_CmdId_NONE;
const MpPlayInviteResultNotify_CmdId MpPlayInviteResultNotify_CmdId_CmdId_MAX = MpPlayInviteResultNotify_CmdId_CMD_ID;
const int MpPlayInviteResultNotify_CmdId_CmdId_ARRAYSIZE = MpPlayInviteResultNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayInviteResultNotify_CmdId_descriptor();
inline const ::std::string& MpPlayInviteResultNotify_CmdId_Name(MpPlayInviteResultNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayInviteResultNotify_CmdId_descriptor(), value);
}
inline bool MpPlayInviteResultNotify_CmdId_Parse(
    const ::std::string& name, MpPlayInviteResultNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayInviteResultNotify_CmdId>(
    MpPlayInviteResultNotify_CmdId_descriptor(), name, value);
}
enum MpPlayPrepareInterruptNotify_CmdId {
  MpPlayPrepareInterruptNotify_CmdId_NONE = 0,
  MpPlayPrepareInterruptNotify_CmdId_CMD_ID = 1813,
  MpPlayPrepareInterruptNotify_CmdId_ENET_CHANNEL_ID = 0,
  MpPlayPrepareInterruptNotify_CmdId_ENET_IS_RELIABLE = 1,
  MpPlayPrepareInterruptNotify_CmdId_MpPlayPrepareInterruptNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpPlayPrepareInterruptNotify_CmdId_MpPlayPrepareInterruptNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpPlayPrepareInterruptNotify_CmdId_IsValid(int value);
const MpPlayPrepareInterruptNotify_CmdId MpPlayPrepareInterruptNotify_CmdId_CmdId_MIN = MpPlayPrepareInterruptNotify_CmdId_NONE;
const MpPlayPrepareInterruptNotify_CmdId MpPlayPrepareInterruptNotify_CmdId_CmdId_MAX = MpPlayPrepareInterruptNotify_CmdId_CMD_ID;
const int MpPlayPrepareInterruptNotify_CmdId_CmdId_ARRAYSIZE = MpPlayPrepareInterruptNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpPlayPrepareInterruptNotify_CmdId_descriptor();
inline const ::std::string& MpPlayPrepareInterruptNotify_CmdId_Name(MpPlayPrepareInterruptNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpPlayPrepareInterruptNotify_CmdId_descriptor(), value);
}
inline bool MpPlayPrepareInterruptNotify_CmdId_Parse(
    const ::std::string& name, MpPlayPrepareInterruptNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpPlayPrepareInterruptNotify_CmdId>(
    MpPlayPrepareInterruptNotify_CmdId_descriptor(), name, value);
}
enum MpBlockNotify_CmdId {
  MpBlockNotify_CmdId_NONE = 0,
  MpBlockNotify_CmdId_CMD_ID = 1801,
  MpBlockNotify_CmdId_ENET_CHANNEL_ID = 0,
  MpBlockNotify_CmdId_ENET_IS_RELIABLE = 1,
  MpBlockNotify_CmdId_MpBlockNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpBlockNotify_CmdId_MpBlockNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpBlockNotify_CmdId_IsValid(int value);
const MpBlockNotify_CmdId MpBlockNotify_CmdId_CmdId_MIN = MpBlockNotify_CmdId_NONE;
const MpBlockNotify_CmdId MpBlockNotify_CmdId_CmdId_MAX = MpBlockNotify_CmdId_CMD_ID;
const int MpBlockNotify_CmdId_CmdId_ARRAYSIZE = MpBlockNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpBlockNotify_CmdId_descriptor();
inline const ::std::string& MpBlockNotify_CmdId_Name(MpBlockNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpBlockNotify_CmdId_descriptor(), value);
}
inline bool MpBlockNotify_CmdId_Parse(
    const ::std::string& name, MpBlockNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpBlockNotify_CmdId>(
    MpBlockNotify_CmdId_descriptor(), name, value);
}
// ===================================================================

class PlayerApplyEnterMpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpNotify) */ {
 public:
  PlayerApplyEnterMpNotify();
  virtual ~PlayerApplyEnterMpNotify();

  PlayerApplyEnterMpNotify(const PlayerApplyEnterMpNotify& from);

  inline PlayerApplyEnterMpNotify& operator=(const PlayerApplyEnterMpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpNotify(PlayerApplyEnterMpNotify&& from) noexcept
    : PlayerApplyEnterMpNotify() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpNotify& operator=(PlayerApplyEnterMpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpNotify& default_instance();

  static inline const PlayerApplyEnterMpNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpNotify*>(
               &_PlayerApplyEnterMpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerApplyEnterMpNotify* other);
  friend void swap(PlayerApplyEnterMpNotify& a, PlayerApplyEnterMpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpNotify& from);
  void MergeFrom(const PlayerApplyEnterMpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.OnlinePlayerInfo src_player_info = 2;
  bool has_src_player_info() const;
  void clear_src_player_info();
  static const int kSrcPlayerInfoFieldNumber = 2;
  const ::proto::OnlinePlayerInfo& src_player_info() const;
  ::proto::OnlinePlayerInfo* mutable_src_player_info();
  ::proto::OnlinePlayerInfo* release_src_player_info();
  void set_allocated_src_player_info(::proto::OnlinePlayerInfo* src_player_info);

  // uint32 src_thread_index = 5;
  void clear_src_thread_index();
  static const int kSrcThreadIndexFieldNumber = 5;
  ::google::protobuf::uint32 src_thread_index() const;
  void set_src_thread_index(::google::protobuf::uint32 value);

  // uint32 src_app_id = 6;
  void clear_src_app_id();
  static const int kSrcAppIdFieldNumber = 6;
  ::google::protobuf::uint32 src_app_id() const;
  void set_src_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::OnlinePlayerInfo* src_player_info_;
  ::google::protobuf::uint32 src_thread_index_;
  ::google::protobuf::uint32 src_app_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpReq) */ {
 public:
  PlayerApplyEnterMpReq();
  virtual ~PlayerApplyEnterMpReq();

  PlayerApplyEnterMpReq(const PlayerApplyEnterMpReq& from);

  inline PlayerApplyEnterMpReq& operator=(const PlayerApplyEnterMpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpReq(PlayerApplyEnterMpReq&& from) noexcept
    : PlayerApplyEnterMpReq() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpReq& operator=(PlayerApplyEnterMpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpReq& default_instance();

  static inline const PlayerApplyEnterMpReq* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpReq*>(
               &_PlayerApplyEnterMpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlayerApplyEnterMpReq* other);
  friend void swap(PlayerApplyEnterMpReq& a, PlayerApplyEnterMpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpReq& from);
  void MergeFrom(const PlayerApplyEnterMpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpReq_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpReq_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    PlayerApplyEnterMpReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 target_uid = 4;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 4;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpRsp) */ {
 public:
  PlayerApplyEnterMpRsp();
  virtual ~PlayerApplyEnterMpRsp();

  PlayerApplyEnterMpRsp(const PlayerApplyEnterMpRsp& from);

  inline PlayerApplyEnterMpRsp& operator=(const PlayerApplyEnterMpRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpRsp(PlayerApplyEnterMpRsp&& from) noexcept
    : PlayerApplyEnterMpRsp() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpRsp& operator=(PlayerApplyEnterMpRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpRsp& default_instance();

  static inline const PlayerApplyEnterMpRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpRsp*>(
               &_PlayerApplyEnterMpRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerApplyEnterMpRsp* other);
  friend void swap(PlayerApplyEnterMpRsp& a, PlayerApplyEnterMpRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpRsp& from);
  void MergeFrom(const PlayerApplyEnterMpRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpRsp_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 target_uid = 3;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 3;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // uint32 param = 4;
  void clear_param();
  static const int kParamFieldNumber = 4;
  ::google::protobuf::uint32 param() const;
  void set_param(::google::protobuf::uint32 value);

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_uid_;
  ::google::protobuf::uint32 param_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpResultNotify) */ {
 public:
  PlayerApplyEnterMpResultNotify();
  virtual ~PlayerApplyEnterMpResultNotify();

  PlayerApplyEnterMpResultNotify(const PlayerApplyEnterMpResultNotify& from);

  inline PlayerApplyEnterMpResultNotify& operator=(const PlayerApplyEnterMpResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpResultNotify(PlayerApplyEnterMpResultNotify&& from) noexcept
    : PlayerApplyEnterMpResultNotify() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpResultNotify& operator=(PlayerApplyEnterMpResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpResultNotify& default_instance();

  static inline const PlayerApplyEnterMpResultNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpResultNotify*>(
               &_PlayerApplyEnterMpResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerApplyEnterMpResultNotify* other);
  friend void swap(PlayerApplyEnterMpResultNotify& a, PlayerApplyEnterMpResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpResultNotify& from);
  void MergeFrom(const PlayerApplyEnterMpResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpResultNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpResultNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpResultNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpResultNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpResultNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpResultNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpResultNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpResultNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpResultNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpResultNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpResultNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpResultNotify_CmdId_Parse(name, value);
  }

  typedef PlayerApplyEnterMpResultNotify_Reason Reason;
  static const Reason PLAYER_JUDGE =
    PlayerApplyEnterMpResultNotify_Reason_PLAYER_JUDGE;
  static const Reason SCENE_CANNOT_ENTER =
    PlayerApplyEnterMpResultNotify_Reason_SCENE_CANNOT_ENTER;
  static const Reason PLAYER_CANNOT_ENTER_MP =
    PlayerApplyEnterMpResultNotify_Reason_PLAYER_CANNOT_ENTER_MP;
  static const Reason SYSTEM_JUDGE =
    PlayerApplyEnterMpResultNotify_Reason_SYSTEM_JUDGE;
  static const Reason ALLOW_ENTER_PLAYER_FULL =
    PlayerApplyEnterMpResultNotify_Reason_ALLOW_ENTER_PLAYER_FULL;
  static const Reason WORLD_LEVEL_LOWER_THAN_HOST =
    PlayerApplyEnterMpResultNotify_Reason_WORLD_LEVEL_LOWER_THAN_HOST;
  static const Reason HOST_IN_MATCH =
    PlayerApplyEnterMpResultNotify_Reason_HOST_IN_MATCH;
  static const Reason PLAYER_IN_BLACKLIST =
    PlayerApplyEnterMpResultNotify_Reason_PLAYER_IN_BLACKLIST;
  static const Reason PS_PLAYER_NOT_ACCEPT_OTHERS =
    PlayerApplyEnterMpResultNotify_Reason_PS_PLAYER_NOT_ACCEPT_OTHERS;
  static const Reason HOST_IS_BLOCKED =
    PlayerApplyEnterMpResultNotify_Reason_HOST_IS_BLOCKED;
  static const Reason OTHER_DATA_VERSION_NOT_LATEST =
    PlayerApplyEnterMpResultNotify_Reason_OTHER_DATA_VERSION_NOT_LATEST;
  static const Reason DATA_VERSION_NOT_LATEST =
    PlayerApplyEnterMpResultNotify_Reason_DATA_VERSION_NOT_LATEST;
  static const Reason PLAYER_NOT_IN_PLAYER_WORLD =
    PlayerApplyEnterMpResultNotify_Reason_PLAYER_NOT_IN_PLAYER_WORLD;
  static const Reason MAX_PLAYER =
    PlayerApplyEnterMpResultNotify_Reason_MAX_PLAYER;
  static inline bool Reason_IsValid(int value) {
    return PlayerApplyEnterMpResultNotify_Reason_IsValid(value);
  }
  static const Reason Reason_MIN =
    PlayerApplyEnterMpResultNotify_Reason_Reason_MIN;
  static const Reason Reason_MAX =
    PlayerApplyEnterMpResultNotify_Reason_Reason_MAX;
  static const int Reason_ARRAYSIZE =
    PlayerApplyEnterMpResultNotify_Reason_Reason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Reason_descriptor() {
    return PlayerApplyEnterMpResultNotify_Reason_descriptor();
  }
  static inline const ::std::string& Reason_Name(Reason value) {
    return PlayerApplyEnterMpResultNotify_Reason_Name(value);
  }
  static inline bool Reason_Parse(const ::std::string& name,
      Reason* value) {
    return PlayerApplyEnterMpResultNotify_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string target_nickname = 12;
  void clear_target_nickname();
  static const int kTargetNicknameFieldNumber = 12;
  const ::std::string& target_nickname() const;
  void set_target_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_target_nickname(::std::string&& value);
  #endif
  void set_target_nickname(const char* value);
  void set_target_nickname(const char* value, size_t size);
  ::std::string* mutable_target_nickname();
  ::std::string* release_target_nickname();
  void set_allocated_target_nickname(::std::string* target_nickname);

  // uint32 target_uid = 1;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 1;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // bool is_agreed = 2;
  void clear_is_agreed();
  static const int kIsAgreedFieldNumber = 2;
  bool is_agreed() const;
  void set_is_agreed(bool value);

  // .proto.PlayerApplyEnterMpResultNotify.Reason reason = 13;
  void clear_reason();
  static const int kReasonFieldNumber = 13;
  ::proto::PlayerApplyEnterMpResultNotify_Reason reason() const;
  void set_reason(::proto::PlayerApplyEnterMpResultNotify_Reason value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpResultNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_nickname_;
  ::google::protobuf::uint32 target_uid_;
  bool is_agreed_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpResultReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpResultReq) */ {
 public:
  PlayerApplyEnterMpResultReq();
  virtual ~PlayerApplyEnterMpResultReq();

  PlayerApplyEnterMpResultReq(const PlayerApplyEnterMpResultReq& from);

  inline PlayerApplyEnterMpResultReq& operator=(const PlayerApplyEnterMpResultReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpResultReq(PlayerApplyEnterMpResultReq&& from) noexcept
    : PlayerApplyEnterMpResultReq() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpResultReq& operator=(PlayerApplyEnterMpResultReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpResultReq& default_instance();

  static inline const PlayerApplyEnterMpResultReq* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpResultReq*>(
               &_PlayerApplyEnterMpResultReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PlayerApplyEnterMpResultReq* other);
  friend void swap(PlayerApplyEnterMpResultReq& a, PlayerApplyEnterMpResultReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpResultReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpResultReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpResultReq& from);
  void MergeFrom(const PlayerApplyEnterMpResultReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpResultReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpResultReq_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpResultReq_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpResultReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpResultReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpResultReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    PlayerApplyEnterMpResultReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpResultReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpResultReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpResultReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpResultReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpResultReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpResultReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpResultReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 apply_uid = 2;
  void clear_apply_uid();
  static const int kApplyUidFieldNumber = 2;
  ::google::protobuf::uint32 apply_uid() const;
  void set_apply_uid(::google::protobuf::uint32 value);

  // bool is_agreed = 12;
  void clear_is_agreed();
  static const int kIsAgreedFieldNumber = 12;
  bool is_agreed() const;
  void set_is_agreed(bool value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpResultReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 apply_uid_;
  bool is_agreed_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerApplyEnterMpResultRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerApplyEnterMpResultRsp) */ {
 public:
  PlayerApplyEnterMpResultRsp();
  virtual ~PlayerApplyEnterMpResultRsp();

  PlayerApplyEnterMpResultRsp(const PlayerApplyEnterMpResultRsp& from);

  inline PlayerApplyEnterMpResultRsp& operator=(const PlayerApplyEnterMpResultRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerApplyEnterMpResultRsp(PlayerApplyEnterMpResultRsp&& from) noexcept
    : PlayerApplyEnterMpResultRsp() {
    *this = ::std::move(from);
  }

  inline PlayerApplyEnterMpResultRsp& operator=(PlayerApplyEnterMpResultRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerApplyEnterMpResultRsp& default_instance();

  static inline const PlayerApplyEnterMpResultRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerApplyEnterMpResultRsp*>(
               &_PlayerApplyEnterMpResultRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PlayerApplyEnterMpResultRsp* other);
  friend void swap(PlayerApplyEnterMpResultRsp& a, PlayerApplyEnterMpResultRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerApplyEnterMpResultRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerApplyEnterMpResultRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerApplyEnterMpResultRsp& from);
  void MergeFrom(const PlayerApplyEnterMpResultRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerApplyEnterMpResultRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerApplyEnterMpResultRsp_CmdId CmdId;
  static const CmdId NONE =
    PlayerApplyEnterMpResultRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerApplyEnterMpResultRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerApplyEnterMpResultRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerApplyEnterMpResultRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerApplyEnterMpResultRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerApplyEnterMpResultRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerApplyEnterMpResultRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerApplyEnterMpResultRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerApplyEnterMpResultRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerApplyEnterMpResultRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerApplyEnterMpResultRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // bool is_agreed = 3;
  void clear_is_agreed();
  static const int kIsAgreedFieldNumber = 3;
  bool is_agreed() const;
  void set_is_agreed(bool value);

  // uint32 apply_uid = 10;
  void clear_apply_uid();
  static const int kApplyUidFieldNumber = 10;
  ::google::protobuf::uint32 apply_uid() const;
  void set_apply_uid(::google::protobuf::uint32 value);

  // uint32 param = 12;
  void clear_param();
  static const int kParamFieldNumber = 12;
  ::google::protobuf::uint32 param() const;
  void set_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerApplyEnterMpResultRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  bool is_agreed_;
  ::google::protobuf::uint32 apply_uid_;
  ::google::protobuf::uint32 param_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitFromMpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerQuitFromMpNotify) */ {
 public:
  PlayerQuitFromMpNotify();
  virtual ~PlayerQuitFromMpNotify();

  PlayerQuitFromMpNotify(const PlayerQuitFromMpNotify& from);

  inline PlayerQuitFromMpNotify& operator=(const PlayerQuitFromMpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitFromMpNotify(PlayerQuitFromMpNotify&& from) noexcept
    : PlayerQuitFromMpNotify() {
    *this = ::std::move(from);
  }

  inline PlayerQuitFromMpNotify& operator=(PlayerQuitFromMpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitFromMpNotify& default_instance();

  static inline const PlayerQuitFromMpNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitFromMpNotify*>(
               &_PlayerQuitFromMpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PlayerQuitFromMpNotify* other);
  friend void swap(PlayerQuitFromMpNotify& a, PlayerQuitFromMpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitFromMpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerQuitFromMpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerQuitFromMpNotify& from);
  void MergeFrom(const PlayerQuitFromMpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerQuitFromMpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerQuitFromMpNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerQuitFromMpNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerQuitFromMpNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerQuitFromMpNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerQuitFromMpNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerQuitFromMpNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerQuitFromMpNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerQuitFromMpNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerQuitFromMpNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerQuitFromMpNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerQuitFromMpNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerQuitFromMpNotify_CmdId_Parse(name, value);
  }

  typedef PlayerQuitFromMpNotify_QuitReason QuitReason;
  static const QuitReason INVALID =
    PlayerQuitFromMpNotify_QuitReason_INVALID;
  static const QuitReason HOST_NO_OTHER_PLAYER =
    PlayerQuitFromMpNotify_QuitReason_HOST_NO_OTHER_PLAYER;
  static const QuitReason KICK_BY_HOST =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST;
  static const QuitReason BACK_TO_MY_WORLD =
    PlayerQuitFromMpNotify_QuitReason_BACK_TO_MY_WORLD;
  static const QuitReason KICK_BY_HOST_LOGOUT =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_LOGOUT;
  static const QuitReason KICK_BY_HOST_BLOCK =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_BLOCK;
  static const QuitReason BE_BLOCKED =
    PlayerQuitFromMpNotify_QuitReason_BE_BLOCKED;
  static const QuitReason KICK_BY_HOST_ENTER_HOME =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_HOST_ENTER_HOME;
  static const QuitReason HOST_SCENE_INVALID =
    PlayerQuitFromMpNotify_QuitReason_HOST_SCENE_INVALID;
  static const QuitReason KICK_BY_PLAY =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_PLAY;
  static const QuitReason KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED =
    PlayerQuitFromMpNotify_QuitReason_KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED;
  static inline bool QuitReason_IsValid(int value) {
    return PlayerQuitFromMpNotify_QuitReason_IsValid(value);
  }
  static const QuitReason QuitReason_MIN =
    PlayerQuitFromMpNotify_QuitReason_QuitReason_MIN;
  static const QuitReason QuitReason_MAX =
    PlayerQuitFromMpNotify_QuitReason_QuitReason_MAX;
  static const int QuitReason_ARRAYSIZE =
    PlayerQuitFromMpNotify_QuitReason_QuitReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  QuitReason_descriptor() {
    return PlayerQuitFromMpNotify_QuitReason_descriptor();
  }
  static inline const ::std::string& QuitReason_Name(QuitReason value) {
    return PlayerQuitFromMpNotify_QuitReason_Name(value);
  }
  static inline bool QuitReason_Parse(const ::std::string& name,
      QuitReason* value) {
    return PlayerQuitFromMpNotify_QuitReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.PlayerQuitFromMpNotify.QuitReason reason = 11;
  void clear_reason();
  static const int kReasonFieldNumber = 11;
  ::proto::PlayerQuitFromMpNotify_QuitReason reason() const;
  void set_reason(::proto::PlayerQuitFromMpNotify_QuitReason value);

  // @@protoc_insertion_point(class_scope:proto.PlayerQuitFromMpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerPreEnterMpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerPreEnterMpNotify) */ {
 public:
  PlayerPreEnterMpNotify();
  virtual ~PlayerPreEnterMpNotify();

  PlayerPreEnterMpNotify(const PlayerPreEnterMpNotify& from);

  inline PlayerPreEnterMpNotify& operator=(const PlayerPreEnterMpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerPreEnterMpNotify(PlayerPreEnterMpNotify&& from) noexcept
    : PlayerPreEnterMpNotify() {
    *this = ::std::move(from);
  }

  inline PlayerPreEnterMpNotify& operator=(PlayerPreEnterMpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPreEnterMpNotify& default_instance();

  static inline const PlayerPreEnterMpNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerPreEnterMpNotify*>(
               &_PlayerPreEnterMpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PlayerPreEnterMpNotify* other);
  friend void swap(PlayerPreEnterMpNotify& a, PlayerPreEnterMpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerPreEnterMpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerPreEnterMpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerPreEnterMpNotify& from);
  void MergeFrom(const PlayerPreEnterMpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerPreEnterMpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerPreEnterMpNotify_CmdId CmdId;
  static const CmdId NONE =
    PlayerPreEnterMpNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerPreEnterMpNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerPreEnterMpNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerPreEnterMpNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerPreEnterMpNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerPreEnterMpNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerPreEnterMpNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerPreEnterMpNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerPreEnterMpNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerPreEnterMpNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerPreEnterMpNotify_CmdId_Parse(name, value);
  }

  typedef PlayerPreEnterMpNotify_State State;
  static const State INVALID =
    PlayerPreEnterMpNotify_State_INVALID;
  static const State START =
    PlayerPreEnterMpNotify_State_START;
  static const State TIMEOUT =
    PlayerPreEnterMpNotify_State_TIMEOUT;
  static inline bool State_IsValid(int value) {
    return PlayerPreEnterMpNotify_State_IsValid(value);
  }
  static const State State_MIN =
    PlayerPreEnterMpNotify_State_State_MIN;
  static const State State_MAX =
    PlayerPreEnterMpNotify_State_State_MAX;
  static const int State_ARRAYSIZE =
    PlayerPreEnterMpNotify_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return PlayerPreEnterMpNotify_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return PlayerPreEnterMpNotify_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return PlayerPreEnterMpNotify_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string nickname = 6;
  void clear_nickname();
  static const int kNicknameFieldNumber = 6;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // .proto.PlayerPreEnterMpNotify.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::proto::PlayerPreEnterMpNotify_State state() const;
  void set_state(::proto::PlayerPreEnterMpNotify_State value);

  // uint32 uid = 14;
  void clear_uid();
  static const int kUidFieldNumber = 14;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerPreEnterMpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  int state_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpModeAvailabilityReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpModeAvailabilityReq) */ {
 public:
  GetPlayerMpModeAvailabilityReq();
  virtual ~GetPlayerMpModeAvailabilityReq();

  GetPlayerMpModeAvailabilityReq(const GetPlayerMpModeAvailabilityReq& from);

  inline GetPlayerMpModeAvailabilityReq& operator=(const GetPlayerMpModeAvailabilityReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpModeAvailabilityReq(GetPlayerMpModeAvailabilityReq&& from) noexcept
    : GetPlayerMpModeAvailabilityReq() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpModeAvailabilityReq& operator=(GetPlayerMpModeAvailabilityReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpModeAvailabilityReq& default_instance();

  static inline const GetPlayerMpModeAvailabilityReq* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpModeAvailabilityReq*>(
               &_GetPlayerMpModeAvailabilityReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetPlayerMpModeAvailabilityReq* other);
  friend void swap(GetPlayerMpModeAvailabilityReq& a, GetPlayerMpModeAvailabilityReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpModeAvailabilityReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpModeAvailabilityReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpModeAvailabilityReq& from);
  void MergeFrom(const GetPlayerMpModeAvailabilityReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpModeAvailabilityReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetPlayerMpModeAvailabilityReq_CmdId CmdId;
  static const CmdId NONE =
    GetPlayerMpModeAvailabilityReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetPlayerMpModeAvailabilityReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetPlayerMpModeAvailabilityReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetPlayerMpModeAvailabilityReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetPlayerMpModeAvailabilityReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetPlayerMpModeAvailabilityReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetPlayerMpModeAvailabilityReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetPlayerMpModeAvailabilityReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetPlayerMpModeAvailabilityReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetPlayerMpModeAvailabilityReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetPlayerMpModeAvailabilityReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpModeAvailabilityReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPlayerMpModeAvailabilityRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetPlayerMpModeAvailabilityRsp) */ {
 public:
  GetPlayerMpModeAvailabilityRsp();
  virtual ~GetPlayerMpModeAvailabilityRsp();

  GetPlayerMpModeAvailabilityRsp(const GetPlayerMpModeAvailabilityRsp& from);

  inline GetPlayerMpModeAvailabilityRsp& operator=(const GetPlayerMpModeAvailabilityRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPlayerMpModeAvailabilityRsp(GetPlayerMpModeAvailabilityRsp&& from) noexcept
    : GetPlayerMpModeAvailabilityRsp() {
    *this = ::std::move(from);
  }

  inline GetPlayerMpModeAvailabilityRsp& operator=(GetPlayerMpModeAvailabilityRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPlayerMpModeAvailabilityRsp& default_instance();

  static inline const GetPlayerMpModeAvailabilityRsp* internal_default_instance() {
    return reinterpret_cast<const GetPlayerMpModeAvailabilityRsp*>(
               &_GetPlayerMpModeAvailabilityRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetPlayerMpModeAvailabilityRsp* other);
  friend void swap(GetPlayerMpModeAvailabilityRsp& a, GetPlayerMpModeAvailabilityRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPlayerMpModeAvailabilityRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPlayerMpModeAvailabilityRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPlayerMpModeAvailabilityRsp& from);
  void MergeFrom(const GetPlayerMpModeAvailabilityRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPlayerMpModeAvailabilityRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetPlayerMpModeAvailabilityRsp_CmdId CmdId;
  static const CmdId NONE =
    GetPlayerMpModeAvailabilityRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetPlayerMpModeAvailabilityRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetPlayerMpModeAvailabilityRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetPlayerMpModeAvailabilityRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetPlayerMpModeAvailabilityRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetPlayerMpModeAvailabilityRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetPlayerMpModeAvailabilityRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetPlayerMpModeAvailabilityRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetPlayerMpModeAvailabilityRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 param_list = 8;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 8;
  ::google::protobuf::uint32 param_list(int index) const;
  void set_param_list(int index, ::google::protobuf::uint32 value);
  void add_param_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_list();

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // int32 mp_ret = 15;
  void clear_mp_ret();
  static const int kMpRetFieldNumber = 15;
  ::google::protobuf::int32 mp_ret() const;
  void set_mp_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetPlayerMpModeAvailabilityRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_list_;
  mutable int _param_list_cached_byte_size_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::int32 mp_ret_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSetOnlyMPWithPSPlayerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerSetOnlyMPWithPSPlayerReq) */ {
 public:
  PlayerSetOnlyMPWithPSPlayerReq();
  virtual ~PlayerSetOnlyMPWithPSPlayerReq();

  PlayerSetOnlyMPWithPSPlayerReq(const PlayerSetOnlyMPWithPSPlayerReq& from);

  inline PlayerSetOnlyMPWithPSPlayerReq& operator=(const PlayerSetOnlyMPWithPSPlayerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSetOnlyMPWithPSPlayerReq(PlayerSetOnlyMPWithPSPlayerReq&& from) noexcept
    : PlayerSetOnlyMPWithPSPlayerReq() {
    *this = ::std::move(from);
  }

  inline PlayerSetOnlyMPWithPSPlayerReq& operator=(PlayerSetOnlyMPWithPSPlayerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSetOnlyMPWithPSPlayerReq& default_instance();

  static inline const PlayerSetOnlyMPWithPSPlayerReq* internal_default_instance() {
    return reinterpret_cast<const PlayerSetOnlyMPWithPSPlayerReq*>(
               &_PlayerSetOnlyMPWithPSPlayerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PlayerSetOnlyMPWithPSPlayerReq* other);
  friend void swap(PlayerSetOnlyMPWithPSPlayerReq& a, PlayerSetOnlyMPWithPSPlayerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSetOnlyMPWithPSPlayerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerSetOnlyMPWithPSPlayerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerSetOnlyMPWithPSPlayerReq& from);
  void MergeFrom(const PlayerSetOnlyMPWithPSPlayerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerSetOnlyMPWithPSPlayerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerSetOnlyMPWithPSPlayerReq_CmdId CmdId;
  static const CmdId NONE =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return PlayerSetOnlyMPWithPSPlayerReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerSetOnlyMPWithPSPlayerReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerSetOnlyMPWithPSPlayerReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerSetOnlyMPWithPSPlayerReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerSetOnlyMPWithPSPlayerReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool is_only = 13;
  void clear_is_only();
  static const int kIsOnlyFieldNumber = 13;
  bool is_only() const;
  void set_is_only(bool value);

  // @@protoc_insertion_point(class_scope:proto.PlayerSetOnlyMPWithPSPlayerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_only_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSetOnlyMPWithPSPlayerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerSetOnlyMPWithPSPlayerRsp) */ {
 public:
  PlayerSetOnlyMPWithPSPlayerRsp();
  virtual ~PlayerSetOnlyMPWithPSPlayerRsp();

  PlayerSetOnlyMPWithPSPlayerRsp(const PlayerSetOnlyMPWithPSPlayerRsp& from);

  inline PlayerSetOnlyMPWithPSPlayerRsp& operator=(const PlayerSetOnlyMPWithPSPlayerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSetOnlyMPWithPSPlayerRsp(PlayerSetOnlyMPWithPSPlayerRsp&& from) noexcept
    : PlayerSetOnlyMPWithPSPlayerRsp() {
    *this = ::std::move(from);
  }

  inline PlayerSetOnlyMPWithPSPlayerRsp& operator=(PlayerSetOnlyMPWithPSPlayerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSetOnlyMPWithPSPlayerRsp& default_instance();

  static inline const PlayerSetOnlyMPWithPSPlayerRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerSetOnlyMPWithPSPlayerRsp*>(
               &_PlayerSetOnlyMPWithPSPlayerRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(PlayerSetOnlyMPWithPSPlayerRsp* other);
  friend void swap(PlayerSetOnlyMPWithPSPlayerRsp& a, PlayerSetOnlyMPWithPSPlayerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSetOnlyMPWithPSPlayerRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerSetOnlyMPWithPSPlayerRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerSetOnlyMPWithPSPlayerRsp& from);
  void MergeFrom(const PlayerSetOnlyMPWithPSPlayerRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerSetOnlyMPWithPSPlayerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PlayerSetOnlyMPWithPSPlayerRsp_CmdId CmdId;
  static const CmdId NONE =
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PlayerSetOnlyMPWithPSPlayerRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PlayerSetOnlyMPWithPSPlayerRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PlayerSetOnlyMPWithPSPlayerRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PlayerSetOnlyMPWithPSPlayerRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PlayerSetOnlyMPWithPSPlayerRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // bool is_only = 8;
  void clear_is_only();
  static const int kIsOnlyFieldNumber = 8;
  bool is_only() const;
  void set_is_only(bool value);

  // @@protoc_insertion_point(class_scope:proto.PlayerSetOnlyMPWithPSPlayerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  bool is_only_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PSPlayerApplyEnterMpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PSPlayerApplyEnterMpReq) */ {
 public:
  PSPlayerApplyEnterMpReq();
  virtual ~PSPlayerApplyEnterMpReq();

  PSPlayerApplyEnterMpReq(const PSPlayerApplyEnterMpReq& from);

  inline PSPlayerApplyEnterMpReq& operator=(const PSPlayerApplyEnterMpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSPlayerApplyEnterMpReq(PSPlayerApplyEnterMpReq&& from) noexcept
    : PSPlayerApplyEnterMpReq() {
    *this = ::std::move(from);
  }

  inline PSPlayerApplyEnterMpReq& operator=(PSPlayerApplyEnterMpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSPlayerApplyEnterMpReq& default_instance();

  static inline const PSPlayerApplyEnterMpReq* internal_default_instance() {
    return reinterpret_cast<const PSPlayerApplyEnterMpReq*>(
               &_PSPlayerApplyEnterMpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(PSPlayerApplyEnterMpReq* other);
  friend void swap(PSPlayerApplyEnterMpReq& a, PSPlayerApplyEnterMpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSPlayerApplyEnterMpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PSPlayerApplyEnterMpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSPlayerApplyEnterMpReq& from);
  void MergeFrom(const PSPlayerApplyEnterMpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSPlayerApplyEnterMpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PSPlayerApplyEnterMpReq_CmdId CmdId;
  static const CmdId NONE =
    PSPlayerApplyEnterMpReq_CmdId_NONE;
  static const CmdId CMD_ID =
    PSPlayerApplyEnterMpReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PSPlayerApplyEnterMpReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PSPlayerApplyEnterMpReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    PSPlayerApplyEnterMpReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return PSPlayerApplyEnterMpReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PSPlayerApplyEnterMpReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PSPlayerApplyEnterMpReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PSPlayerApplyEnterMpReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PSPlayerApplyEnterMpReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PSPlayerApplyEnterMpReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PSPlayerApplyEnterMpReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string target_psn_id = 5;
  void clear_target_psn_id();
  static const int kTargetPsnIdFieldNumber = 5;
  const ::std::string& target_psn_id() const;
  void set_target_psn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_target_psn_id(::std::string&& value);
  #endif
  void set_target_psn_id(const char* value);
  void set_target_psn_id(const char* value, size_t size);
  ::std::string* mutable_target_psn_id();
  ::std::string* release_target_psn_id();
  void set_allocated_target_psn_id(::std::string* target_psn_id);

  // @@protoc_insertion_point(class_scope:proto.PSPlayerApplyEnterMpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_psn_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PSPlayerApplyEnterMpRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PSPlayerApplyEnterMpRsp) */ {
 public:
  PSPlayerApplyEnterMpRsp();
  virtual ~PSPlayerApplyEnterMpRsp();

  PSPlayerApplyEnterMpRsp(const PSPlayerApplyEnterMpRsp& from);

  inline PSPlayerApplyEnterMpRsp& operator=(const PSPlayerApplyEnterMpRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSPlayerApplyEnterMpRsp(PSPlayerApplyEnterMpRsp&& from) noexcept
    : PSPlayerApplyEnterMpRsp() {
    *this = ::std::move(from);
  }

  inline PSPlayerApplyEnterMpRsp& operator=(PSPlayerApplyEnterMpRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSPlayerApplyEnterMpRsp& default_instance();

  static inline const PSPlayerApplyEnterMpRsp* internal_default_instance() {
    return reinterpret_cast<const PSPlayerApplyEnterMpRsp*>(
               &_PSPlayerApplyEnterMpRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(PSPlayerApplyEnterMpRsp* other);
  friend void swap(PSPlayerApplyEnterMpRsp& a, PSPlayerApplyEnterMpRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSPlayerApplyEnterMpRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PSPlayerApplyEnterMpRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSPlayerApplyEnterMpRsp& from);
  void MergeFrom(const PSPlayerApplyEnterMpRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSPlayerApplyEnterMpRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PSPlayerApplyEnterMpRsp_CmdId CmdId;
  static const CmdId NONE =
    PSPlayerApplyEnterMpRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    PSPlayerApplyEnterMpRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PSPlayerApplyEnterMpRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PSPlayerApplyEnterMpRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PSPlayerApplyEnterMpRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PSPlayerApplyEnterMpRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PSPlayerApplyEnterMpRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PSPlayerApplyEnterMpRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PSPlayerApplyEnterMpRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PSPlayerApplyEnterMpRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PSPlayerApplyEnterMpRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string target_psn_id = 2;
  void clear_target_psn_id();
  static const int kTargetPsnIdFieldNumber = 2;
  const ::std::string& target_psn_id() const;
  void set_target_psn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_target_psn_id(::std::string&& value);
  #endif
  void set_target_psn_id(const char* value);
  void set_target_psn_id(const char* value, size_t size);
  ::std::string* mutable_target_psn_id();
  ::std::string* release_target_psn_id();
  void set_allocated_target_psn_id(::std::string* target_psn_id);

  // int32 retcode = 6;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 param = 10;
  void clear_param();
  static const int kParamFieldNumber = 10;
  ::google::protobuf::uint32 param() const;
  void set_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PSPlayerApplyEnterMpRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_psn_id_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 param_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayOwnerCheckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayOwnerCheckReq) */ {
 public:
  MpPlayOwnerCheckReq();
  virtual ~MpPlayOwnerCheckReq();

  MpPlayOwnerCheckReq(const MpPlayOwnerCheckReq& from);

  inline MpPlayOwnerCheckReq& operator=(const MpPlayOwnerCheckReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayOwnerCheckReq(MpPlayOwnerCheckReq&& from) noexcept
    : MpPlayOwnerCheckReq() {
    *this = ::std::move(from);
  }

  inline MpPlayOwnerCheckReq& operator=(MpPlayOwnerCheckReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayOwnerCheckReq& default_instance();

  static inline const MpPlayOwnerCheckReq* internal_default_instance() {
    return reinterpret_cast<const MpPlayOwnerCheckReq*>(
               &_MpPlayOwnerCheckReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(MpPlayOwnerCheckReq* other);
  friend void swap(MpPlayOwnerCheckReq& a, MpPlayOwnerCheckReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayOwnerCheckReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayOwnerCheckReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayOwnerCheckReq& from);
  void MergeFrom(const MpPlayOwnerCheckReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayOwnerCheckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayOwnerCheckReq_CmdId CmdId;
  static const CmdId NONE =
    MpPlayOwnerCheckReq_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayOwnerCheckReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayOwnerCheckReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayOwnerCheckReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    MpPlayOwnerCheckReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayOwnerCheckReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayOwnerCheckReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayOwnerCheckReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayOwnerCheckReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayOwnerCheckReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayOwnerCheckReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayOwnerCheckReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool is_skip_match = 3;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 3;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // uint32 mp_play_id = 9;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 9;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayOwnerCheckReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_skip_match_;
  ::google::protobuf::uint32 mp_play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayOwnerCheckRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayOwnerCheckRsp) */ {
 public:
  MpPlayOwnerCheckRsp();
  virtual ~MpPlayOwnerCheckRsp();

  MpPlayOwnerCheckRsp(const MpPlayOwnerCheckRsp& from);

  inline MpPlayOwnerCheckRsp& operator=(const MpPlayOwnerCheckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayOwnerCheckRsp(MpPlayOwnerCheckRsp&& from) noexcept
    : MpPlayOwnerCheckRsp() {
    *this = ::std::move(from);
  }

  inline MpPlayOwnerCheckRsp& operator=(MpPlayOwnerCheckRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayOwnerCheckRsp& default_instance();

  static inline const MpPlayOwnerCheckRsp* internal_default_instance() {
    return reinterpret_cast<const MpPlayOwnerCheckRsp*>(
               &_MpPlayOwnerCheckRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(MpPlayOwnerCheckRsp* other);
  friend void swap(MpPlayOwnerCheckRsp& a, MpPlayOwnerCheckRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayOwnerCheckRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayOwnerCheckRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayOwnerCheckRsp& from);
  void MergeFrom(const MpPlayOwnerCheckRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayOwnerCheckRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayOwnerCheckRsp_CmdId CmdId;
  static const CmdId NONE =
    MpPlayOwnerCheckRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayOwnerCheckRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayOwnerCheckRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayOwnerCheckRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayOwnerCheckRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayOwnerCheckRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayOwnerCheckRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayOwnerCheckRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayOwnerCheckRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayOwnerCheckRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayOwnerCheckRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 wrong_uid = 4;
  void clear_wrong_uid();
  static const int kWrongUidFieldNumber = 4;
  ::google::protobuf::uint32 wrong_uid() const;
  void set_wrong_uid(::google::protobuf::uint32 value);

  // uint32 mp_play_id = 10;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 10;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // int32 retcode = 12;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 12;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // bool is_skip_match = 15;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 15;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayOwnerCheckRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 wrong_uid_;
  ::google::protobuf::uint32 mp_play_id_;
  ::google::protobuf::int32 retcode_;
  bool is_skip_match_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayOwnerStartInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayOwnerStartInviteReq) */ {
 public:
  MpPlayOwnerStartInviteReq();
  virtual ~MpPlayOwnerStartInviteReq();

  MpPlayOwnerStartInviteReq(const MpPlayOwnerStartInviteReq& from);

  inline MpPlayOwnerStartInviteReq& operator=(const MpPlayOwnerStartInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayOwnerStartInviteReq(MpPlayOwnerStartInviteReq&& from) noexcept
    : MpPlayOwnerStartInviteReq() {
    *this = ::std::move(from);
  }

  inline MpPlayOwnerStartInviteReq& operator=(MpPlayOwnerStartInviteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayOwnerStartInviteReq& default_instance();

  static inline const MpPlayOwnerStartInviteReq* internal_default_instance() {
    return reinterpret_cast<const MpPlayOwnerStartInviteReq*>(
               &_MpPlayOwnerStartInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(MpPlayOwnerStartInviteReq* other);
  friend void swap(MpPlayOwnerStartInviteReq& a, MpPlayOwnerStartInviteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayOwnerStartInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayOwnerStartInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayOwnerStartInviteReq& from);
  void MergeFrom(const MpPlayOwnerStartInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayOwnerStartInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayOwnerStartInviteReq_CmdId CmdId;
  static const CmdId NONE =
    MpPlayOwnerStartInviteReq_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayOwnerStartInviteReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayOwnerStartInviteReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayOwnerStartInviteReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    MpPlayOwnerStartInviteReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayOwnerStartInviteReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayOwnerStartInviteReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayOwnerStartInviteReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayOwnerStartInviteReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayOwnerStartInviteReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayOwnerStartInviteReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayOwnerStartInviteReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mp_play_id = 3;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 3;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // bool is_skip_match = 6;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 6;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayOwnerStartInviteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mp_play_id_;
  bool is_skip_match_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayOwnerStartInviteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayOwnerStartInviteRsp) */ {
 public:
  MpPlayOwnerStartInviteRsp();
  virtual ~MpPlayOwnerStartInviteRsp();

  MpPlayOwnerStartInviteRsp(const MpPlayOwnerStartInviteRsp& from);

  inline MpPlayOwnerStartInviteRsp& operator=(const MpPlayOwnerStartInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayOwnerStartInviteRsp(MpPlayOwnerStartInviteRsp&& from) noexcept
    : MpPlayOwnerStartInviteRsp() {
    *this = ::std::move(from);
  }

  inline MpPlayOwnerStartInviteRsp& operator=(MpPlayOwnerStartInviteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayOwnerStartInviteRsp& default_instance();

  static inline const MpPlayOwnerStartInviteRsp* internal_default_instance() {
    return reinterpret_cast<const MpPlayOwnerStartInviteRsp*>(
               &_MpPlayOwnerStartInviteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(MpPlayOwnerStartInviteRsp* other);
  friend void swap(MpPlayOwnerStartInviteRsp& a, MpPlayOwnerStartInviteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayOwnerStartInviteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayOwnerStartInviteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayOwnerStartInviteRsp& from);
  void MergeFrom(const MpPlayOwnerStartInviteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayOwnerStartInviteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayOwnerStartInviteRsp_CmdId CmdId;
  static const CmdId NONE =
    MpPlayOwnerStartInviteRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayOwnerStartInviteRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayOwnerStartInviteRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayOwnerStartInviteRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayOwnerStartInviteRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayOwnerStartInviteRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayOwnerStartInviteRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayOwnerStartInviteRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayOwnerStartInviteRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayOwnerStartInviteRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayOwnerStartInviteRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 14;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 14;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 mp_play_id = 3;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 3;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // bool is_skip_match = 9;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 9;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayOwnerStartInviteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 mp_play_id_;
  bool is_skip_match_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayOwnerInviteNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayOwnerInviteNotify) */ {
 public:
  MpPlayOwnerInviteNotify();
  virtual ~MpPlayOwnerInviteNotify();

  MpPlayOwnerInviteNotify(const MpPlayOwnerInviteNotify& from);

  inline MpPlayOwnerInviteNotify& operator=(const MpPlayOwnerInviteNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayOwnerInviteNotify(MpPlayOwnerInviteNotify&& from) noexcept
    : MpPlayOwnerInviteNotify() {
    *this = ::std::move(from);
  }

  inline MpPlayOwnerInviteNotify& operator=(MpPlayOwnerInviteNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayOwnerInviteNotify& default_instance();

  static inline const MpPlayOwnerInviteNotify* internal_default_instance() {
    return reinterpret_cast<const MpPlayOwnerInviteNotify*>(
               &_MpPlayOwnerInviteNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(MpPlayOwnerInviteNotify* other);
  friend void swap(MpPlayOwnerInviteNotify& a, MpPlayOwnerInviteNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayOwnerInviteNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayOwnerInviteNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayOwnerInviteNotify& from);
  void MergeFrom(const MpPlayOwnerInviteNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayOwnerInviteNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayOwnerInviteNotify_CmdId CmdId;
  static const CmdId NONE =
    MpPlayOwnerInviteNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayOwnerInviteNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayOwnerInviteNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayOwnerInviteNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayOwnerInviteNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayOwnerInviteNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayOwnerInviteNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayOwnerInviteNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayOwnerInviteNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayOwnerInviteNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayOwnerInviteNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mp_play_id = 13;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 13;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // bool is_remain_reward = 10;
  void clear_is_remain_reward();
  static const int kIsRemainRewardFieldNumber = 10;
  bool is_remain_reward() const;
  void set_is_remain_reward(bool value);

  // uint32 cd = 12;
  void clear_cd();
  static const int kCdFieldNumber = 12;
  ::google::protobuf::uint32 cd() const;
  void set_cd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayOwnerInviteNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mp_play_id_;
  bool is_remain_reward_;
  ::google::protobuf::uint32 cd_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayGuestReplyInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayGuestReplyInviteReq) */ {
 public:
  MpPlayGuestReplyInviteReq();
  virtual ~MpPlayGuestReplyInviteReq();

  MpPlayGuestReplyInviteReq(const MpPlayGuestReplyInviteReq& from);

  inline MpPlayGuestReplyInviteReq& operator=(const MpPlayGuestReplyInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayGuestReplyInviteReq(MpPlayGuestReplyInviteReq&& from) noexcept
    : MpPlayGuestReplyInviteReq() {
    *this = ::std::move(from);
  }

  inline MpPlayGuestReplyInviteReq& operator=(MpPlayGuestReplyInviteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayGuestReplyInviteReq& default_instance();

  static inline const MpPlayGuestReplyInviteReq* internal_default_instance() {
    return reinterpret_cast<const MpPlayGuestReplyInviteReq*>(
               &_MpPlayGuestReplyInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(MpPlayGuestReplyInviteReq* other);
  friend void swap(MpPlayGuestReplyInviteReq& a, MpPlayGuestReplyInviteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayGuestReplyInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayGuestReplyInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayGuestReplyInviteReq& from);
  void MergeFrom(const MpPlayGuestReplyInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayGuestReplyInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayGuestReplyInviteReq_CmdId CmdId;
  static const CmdId NONE =
    MpPlayGuestReplyInviteReq_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayGuestReplyInviteReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayGuestReplyInviteReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayGuestReplyInviteReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    MpPlayGuestReplyInviteReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayGuestReplyInviteReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayGuestReplyInviteReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayGuestReplyInviteReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayGuestReplyInviteReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayGuestReplyInviteReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayGuestReplyInviteReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayGuestReplyInviteReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mp_play_id = 3;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 3;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // bool is_agree = 15;
  void clear_is_agree();
  static const int kIsAgreeFieldNumber = 15;
  bool is_agree() const;
  void set_is_agree(bool value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayGuestReplyInviteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mp_play_id_;
  bool is_agree_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayGuestReplyInviteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayGuestReplyInviteRsp) */ {
 public:
  MpPlayGuestReplyInviteRsp();
  virtual ~MpPlayGuestReplyInviteRsp();

  MpPlayGuestReplyInviteRsp(const MpPlayGuestReplyInviteRsp& from);

  inline MpPlayGuestReplyInviteRsp& operator=(const MpPlayGuestReplyInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayGuestReplyInviteRsp(MpPlayGuestReplyInviteRsp&& from) noexcept
    : MpPlayGuestReplyInviteRsp() {
    *this = ::std::move(from);
  }

  inline MpPlayGuestReplyInviteRsp& operator=(MpPlayGuestReplyInviteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayGuestReplyInviteRsp& default_instance();

  static inline const MpPlayGuestReplyInviteRsp* internal_default_instance() {
    return reinterpret_cast<const MpPlayGuestReplyInviteRsp*>(
               &_MpPlayGuestReplyInviteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(MpPlayGuestReplyInviteRsp* other);
  friend void swap(MpPlayGuestReplyInviteRsp& a, MpPlayGuestReplyInviteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayGuestReplyInviteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayGuestReplyInviteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayGuestReplyInviteRsp& from);
  void MergeFrom(const MpPlayGuestReplyInviteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayGuestReplyInviteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayGuestReplyInviteRsp_CmdId CmdId;
  static const CmdId NONE =
    MpPlayGuestReplyInviteRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayGuestReplyInviteRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayGuestReplyInviteRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayGuestReplyInviteRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayGuestReplyInviteRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayGuestReplyInviteRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayGuestReplyInviteRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayGuestReplyInviteRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayGuestReplyInviteRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayGuestReplyInviteRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayGuestReplyInviteRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 mp_play_id = 10;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 10;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayGuestReplyInviteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 mp_play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayGuestReplyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayGuestReplyNotify) */ {
 public:
  MpPlayGuestReplyNotify();
  virtual ~MpPlayGuestReplyNotify();

  MpPlayGuestReplyNotify(const MpPlayGuestReplyNotify& from);

  inline MpPlayGuestReplyNotify& operator=(const MpPlayGuestReplyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayGuestReplyNotify(MpPlayGuestReplyNotify&& from) noexcept
    : MpPlayGuestReplyNotify() {
    *this = ::std::move(from);
  }

  inline MpPlayGuestReplyNotify& operator=(MpPlayGuestReplyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayGuestReplyNotify& default_instance();

  static inline const MpPlayGuestReplyNotify* internal_default_instance() {
    return reinterpret_cast<const MpPlayGuestReplyNotify*>(
               &_MpPlayGuestReplyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(MpPlayGuestReplyNotify* other);
  friend void swap(MpPlayGuestReplyNotify& a, MpPlayGuestReplyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayGuestReplyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayGuestReplyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayGuestReplyNotify& from);
  void MergeFrom(const MpPlayGuestReplyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayGuestReplyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayGuestReplyNotify_CmdId CmdId;
  static const CmdId NONE =
    MpPlayGuestReplyNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayGuestReplyNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayGuestReplyNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayGuestReplyNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayGuestReplyNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayGuestReplyNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayGuestReplyNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayGuestReplyNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayGuestReplyNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayGuestReplyNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayGuestReplyNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mp_play_id = 14;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 14;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // bool is_agree = 4;
  void clear_is_agree();
  static const int kIsAgreeFieldNumber = 4;
  bool is_agree() const;
  void set_is_agree(bool value);

  // uint32 uid = 7;
  void clear_uid();
  static const int kUidFieldNumber = 7;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayGuestReplyNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mp_play_id_;
  bool is_agree_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayPrepareNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayPrepareNotify) */ {
 public:
  MpPlayPrepareNotify();
  virtual ~MpPlayPrepareNotify();

  MpPlayPrepareNotify(const MpPlayPrepareNotify& from);

  inline MpPlayPrepareNotify& operator=(const MpPlayPrepareNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayPrepareNotify(MpPlayPrepareNotify&& from) noexcept
    : MpPlayPrepareNotify() {
    *this = ::std::move(from);
  }

  inline MpPlayPrepareNotify& operator=(MpPlayPrepareNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayPrepareNotify& default_instance();

  static inline const MpPlayPrepareNotify* internal_default_instance() {
    return reinterpret_cast<const MpPlayPrepareNotify*>(
               &_MpPlayPrepareNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(MpPlayPrepareNotify* other);
  friend void swap(MpPlayPrepareNotify& a, MpPlayPrepareNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayPrepareNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayPrepareNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayPrepareNotify& from);
  void MergeFrom(const MpPlayPrepareNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayPrepareNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayPrepareNotify_CmdId CmdId;
  static const CmdId NONE =
    MpPlayPrepareNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayPrepareNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayPrepareNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayPrepareNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayPrepareNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayPrepareNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayPrepareNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayPrepareNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayPrepareNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayPrepareNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayPrepareNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mp_play_id = 9;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 9;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // uint32 prepare_end_time = 11;
  void clear_prepare_end_time();
  static const int kPrepareEndTimeFieldNumber = 11;
  ::google::protobuf::uint32 prepare_end_time() const;
  void set_prepare_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayPrepareNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mp_play_id_;
  ::google::protobuf::uint32 prepare_end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayInviteResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayInviteResultNotify) */ {
 public:
  MpPlayInviteResultNotify();
  virtual ~MpPlayInviteResultNotify();

  MpPlayInviteResultNotify(const MpPlayInviteResultNotify& from);

  inline MpPlayInviteResultNotify& operator=(const MpPlayInviteResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayInviteResultNotify(MpPlayInviteResultNotify&& from) noexcept
    : MpPlayInviteResultNotify() {
    *this = ::std::move(from);
  }

  inline MpPlayInviteResultNotify& operator=(MpPlayInviteResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayInviteResultNotify& default_instance();

  static inline const MpPlayInviteResultNotify* internal_default_instance() {
    return reinterpret_cast<const MpPlayInviteResultNotify*>(
               &_MpPlayInviteResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(MpPlayInviteResultNotify* other);
  friend void swap(MpPlayInviteResultNotify& a, MpPlayInviteResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayInviteResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayInviteResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayInviteResultNotify& from);
  void MergeFrom(const MpPlayInviteResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayInviteResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayInviteResultNotify_CmdId CmdId;
  static const CmdId NONE =
    MpPlayInviteResultNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayInviteResultNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayInviteResultNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayInviteResultNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayInviteResultNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayInviteResultNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayInviteResultNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayInviteResultNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayInviteResultNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayInviteResultNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayInviteResultNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool all_argee = 10;
  void clear_all_argee();
  static const int kAllArgeeFieldNumber = 10;
  bool all_argee() const;
  void set_all_argee(bool value);

  // uint32 mp_play_id = 11;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 11;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayInviteResultNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool all_argee_;
  ::google::protobuf::uint32 mp_play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpPlayPrepareInterruptNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpPlayPrepareInterruptNotify) */ {
 public:
  MpPlayPrepareInterruptNotify();
  virtual ~MpPlayPrepareInterruptNotify();

  MpPlayPrepareInterruptNotify(const MpPlayPrepareInterruptNotify& from);

  inline MpPlayPrepareInterruptNotify& operator=(const MpPlayPrepareInterruptNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpPlayPrepareInterruptNotify(MpPlayPrepareInterruptNotify&& from) noexcept
    : MpPlayPrepareInterruptNotify() {
    *this = ::std::move(from);
  }

  inline MpPlayPrepareInterruptNotify& operator=(MpPlayPrepareInterruptNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpPlayPrepareInterruptNotify& default_instance();

  static inline const MpPlayPrepareInterruptNotify* internal_default_instance() {
    return reinterpret_cast<const MpPlayPrepareInterruptNotify*>(
               &_MpPlayPrepareInterruptNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(MpPlayPrepareInterruptNotify* other);
  friend void swap(MpPlayPrepareInterruptNotify& a, MpPlayPrepareInterruptNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpPlayPrepareInterruptNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MpPlayPrepareInterruptNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpPlayPrepareInterruptNotify& from);
  void MergeFrom(const MpPlayPrepareInterruptNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpPlayPrepareInterruptNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpPlayPrepareInterruptNotify_CmdId CmdId;
  static const CmdId NONE =
    MpPlayPrepareInterruptNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    MpPlayPrepareInterruptNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpPlayPrepareInterruptNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpPlayPrepareInterruptNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpPlayPrepareInterruptNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpPlayPrepareInterruptNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpPlayPrepareInterruptNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpPlayPrepareInterruptNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpPlayPrepareInterruptNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpPlayPrepareInterruptNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpPlayPrepareInterruptNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 mp_play_id = 12;
  void clear_mp_play_id();
  static const int kMpPlayIdFieldNumber = 12;
  ::google::protobuf::uint32 mp_play_id() const;
  void set_mp_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpPlayPrepareInterruptNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mp_play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpBlockNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MpBlockNotify) */ {
 public:
  MpBlockNotify();
  virtual ~MpBlockNotify();

  MpBlockNotify(const MpBlockNotify& from);

  inline MpBlockNotify& operator=(const MpBlockNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MpBlockNotify(MpBlockNotify&& from) noexcept
    : MpBlockNotify() {
    *this = ::std::move(from);
  }

  inline MpBlockNotify& operator=(MpBlockNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpBlockNotify& default_instance();

  static inline const MpBlockNotify* internal_default_instance() {
    return reinterpret_cast<const MpBlockNotify*>(
               &_MpBlockNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(MpBlockNotify* other);
  friend void swap(MpBlockNotify& a, MpBlockNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MpBlockNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MpBlockNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpBlockNotify& from);
  void MergeFrom(const MpBlockNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpBlockNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpBlockNotify_CmdId CmdId;
  static const CmdId NONE =
    MpBlockNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    MpBlockNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    MpBlockNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    MpBlockNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return MpBlockNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    MpBlockNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    MpBlockNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    MpBlockNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return MpBlockNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return MpBlockNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return MpBlockNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 end_time = 13;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 13;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MpBlockNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================


// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpNotify_CmdId>() {
  return ::proto::PlayerApplyEnterMpNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpReq_CmdId>() {
  return ::proto::PlayerApplyEnterMpReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpRsp_CmdId>() {
  return ::proto::PlayerApplyEnterMpRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultNotify_CmdId>() {
  return ::proto::PlayerApplyEnterMpResultNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultNotify_Reason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultNotify_Reason>() {
  return ::proto::PlayerApplyEnterMpResultNotify_Reason_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultReq_CmdId>() {
  return ::proto::PlayerApplyEnterMpResultReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerApplyEnterMpResultRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerApplyEnterMpResultRsp_CmdId>() {
  return ::proto::PlayerApplyEnterMpResultRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerQuitFromMpNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerQuitFromMpNotify_CmdId>() {
  return ::proto::PlayerQuitFromMpNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerQuitFromMpNotify_QuitReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerQuitFromMpNotify_QuitReason>() {
  return ::proto::PlayerQuitFromMpNotify_QuitReason_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerPreEnterMpNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerPreEnterMpNotify_CmdId>() {
  return ::proto::PlayerPreEnterMpNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerPreEnterMpNotify_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerPreEnterMpNotify_State>() {
  return ::proto::PlayerPreEnterMpNotify_State_descriptor();
}
template <> struct is_proto_enum< ::proto::GetPlayerMpModeAvailabilityReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetPlayerMpModeAvailabilityReq_CmdId>() {
  return ::proto::GetPlayerMpModeAvailabilityReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetPlayerMpModeAvailabilityRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetPlayerMpModeAvailabilityRsp_CmdId>() {
  return ::proto::GetPlayerMpModeAvailabilityRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerSetOnlyMPWithPSPlayerReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerSetOnlyMPWithPSPlayerReq_CmdId>() {
  return ::proto::PlayerSetOnlyMPWithPSPlayerReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PlayerSetOnlyMPWithPSPlayerRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PlayerSetOnlyMPWithPSPlayerRsp_CmdId>() {
  return ::proto::PlayerSetOnlyMPWithPSPlayerRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PSPlayerApplyEnterMpReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PSPlayerApplyEnterMpReq_CmdId>() {
  return ::proto::PSPlayerApplyEnterMpReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PSPlayerApplyEnterMpRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PSPlayerApplyEnterMpRsp_CmdId>() {
  return ::proto::PSPlayerApplyEnterMpRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayOwnerCheckReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayOwnerCheckReq_CmdId>() {
  return ::proto::MpPlayOwnerCheckReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayOwnerCheckRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayOwnerCheckRsp_CmdId>() {
  return ::proto::MpPlayOwnerCheckRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayOwnerStartInviteReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayOwnerStartInviteReq_CmdId>() {
  return ::proto::MpPlayOwnerStartInviteReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayOwnerStartInviteRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayOwnerStartInviteRsp_CmdId>() {
  return ::proto::MpPlayOwnerStartInviteRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayOwnerInviteNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayOwnerInviteNotify_CmdId>() {
  return ::proto::MpPlayOwnerInviteNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayGuestReplyInviteReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayGuestReplyInviteReq_CmdId>() {
  return ::proto::MpPlayGuestReplyInviteReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayGuestReplyInviteRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayGuestReplyInviteRsp_CmdId>() {
  return ::proto::MpPlayGuestReplyInviteRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayGuestReplyNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayGuestReplyNotify_CmdId>() {
  return ::proto::MpPlayGuestReplyNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayPrepareNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayPrepareNotify_CmdId>() {
  return ::proto::MpPlayPrepareNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayInviteResultNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayInviteResultNotify_CmdId>() {
  return ::proto::MpPlayInviteResultNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpPlayPrepareInterruptNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpPlayPrepareInterruptNotify_CmdId>() {
  return ::proto::MpPlayPrepareInterruptNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::MpBlockNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MpBlockNotify_CmdId>() {
  return ::proto::MpBlockNotify_CmdId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fmp_2eproto__INCLUDED
